// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel_filter,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=165442899,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=3452,HLS_SYN_LUT=3059}" *)

module sobel_filter (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY,
        m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY,
        m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST,
        m_axi_gmem2_WID,
        m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST,
        m_axi_gmem2_RID,
        m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID,
        m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP,
        m_axi_gmem2_BID,
        m_axi_gmem2_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 112'd1;
parameter    ap_ST_fsm_state2 = 112'd2;
parameter    ap_ST_fsm_state3 = 112'd4;
parameter    ap_ST_fsm_state4 = 112'd8;
parameter    ap_ST_fsm_state5 = 112'd16;
parameter    ap_ST_fsm_state6 = 112'd32;
parameter    ap_ST_fsm_state7 = 112'd64;
parameter    ap_ST_fsm_state8 = 112'd128;
parameter    ap_ST_fsm_state9 = 112'd256;
parameter    ap_ST_fsm_state10 = 112'd512;
parameter    ap_ST_fsm_state11 = 112'd1024;
parameter    ap_ST_fsm_state12 = 112'd2048;
parameter    ap_ST_fsm_state13 = 112'd4096;
parameter    ap_ST_fsm_state14 = 112'd8192;
parameter    ap_ST_fsm_state15 = 112'd16384;
parameter    ap_ST_fsm_state16 = 112'd32768;
parameter    ap_ST_fsm_state17 = 112'd65536;
parameter    ap_ST_fsm_state18 = 112'd131072;
parameter    ap_ST_fsm_state19 = 112'd262144;
parameter    ap_ST_fsm_state20 = 112'd524288;
parameter    ap_ST_fsm_state21 = 112'd1048576;
parameter    ap_ST_fsm_state22 = 112'd2097152;
parameter    ap_ST_fsm_state23 = 112'd4194304;
parameter    ap_ST_fsm_state24 = 112'd8388608;
parameter    ap_ST_fsm_state25 = 112'd16777216;
parameter    ap_ST_fsm_state26 = 112'd33554432;
parameter    ap_ST_fsm_state27 = 112'd67108864;
parameter    ap_ST_fsm_state28 = 112'd134217728;
parameter    ap_ST_fsm_state29 = 112'd268435456;
parameter    ap_ST_fsm_state30 = 112'd536870912;
parameter    ap_ST_fsm_state31 = 112'd1073741824;
parameter    ap_ST_fsm_pp0_stage0 = 112'd2147483648;
parameter    ap_ST_fsm_pp0_stage1 = 112'd4294967296;
parameter    ap_ST_fsm_pp0_stage2 = 112'd8589934592;
parameter    ap_ST_fsm_pp0_stage3 = 112'd17179869184;
parameter    ap_ST_fsm_pp0_stage4 = 112'd34359738368;
parameter    ap_ST_fsm_pp0_stage5 = 112'd68719476736;
parameter    ap_ST_fsm_pp0_stage6 = 112'd137438953472;
parameter    ap_ST_fsm_pp0_stage7 = 112'd274877906944;
parameter    ap_ST_fsm_pp0_stage8 = 112'd549755813888;
parameter    ap_ST_fsm_pp0_stage9 = 112'd1099511627776;
parameter    ap_ST_fsm_pp0_stage10 = 112'd2199023255552;
parameter    ap_ST_fsm_pp0_stage11 = 112'd4398046511104;
parameter    ap_ST_fsm_pp0_stage12 = 112'd8796093022208;
parameter    ap_ST_fsm_pp0_stage13 = 112'd17592186044416;
parameter    ap_ST_fsm_pp0_stage14 = 112'd35184372088832;
parameter    ap_ST_fsm_pp0_stage15 = 112'd70368744177664;
parameter    ap_ST_fsm_pp0_stage16 = 112'd140737488355328;
parameter    ap_ST_fsm_pp0_stage17 = 112'd281474976710656;
parameter    ap_ST_fsm_pp0_stage18 = 112'd562949953421312;
parameter    ap_ST_fsm_pp0_stage19 = 112'd1125899906842624;
parameter    ap_ST_fsm_pp0_stage20 = 112'd2251799813685248;
parameter    ap_ST_fsm_pp0_stage21 = 112'd4503599627370496;
parameter    ap_ST_fsm_pp0_stage22 = 112'd9007199254740992;
parameter    ap_ST_fsm_pp0_stage23 = 112'd18014398509481984;
parameter    ap_ST_fsm_pp0_stage24 = 112'd36028797018963968;
parameter    ap_ST_fsm_pp0_stage25 = 112'd72057594037927936;
parameter    ap_ST_fsm_pp0_stage26 = 112'd144115188075855872;
parameter    ap_ST_fsm_pp0_stage27 = 112'd288230376151711744;
parameter    ap_ST_fsm_pp0_stage28 = 112'd576460752303423488;
parameter    ap_ST_fsm_pp0_stage29 = 112'd1152921504606846976;
parameter    ap_ST_fsm_pp0_stage30 = 112'd2305843009213693952;
parameter    ap_ST_fsm_pp0_stage31 = 112'd4611686018427387904;
parameter    ap_ST_fsm_pp0_stage32 = 112'd9223372036854775808;
parameter    ap_ST_fsm_pp0_stage33 = 112'd18446744073709551616;
parameter    ap_ST_fsm_pp0_stage34 = 112'd36893488147419103232;
parameter    ap_ST_fsm_pp0_stage35 = 112'd73786976294838206464;
parameter    ap_ST_fsm_pp0_stage36 = 112'd147573952589676412928;
parameter    ap_ST_fsm_pp0_stage37 = 112'd295147905179352825856;
parameter    ap_ST_fsm_pp0_stage38 = 112'd590295810358705651712;
parameter    ap_ST_fsm_pp0_stage39 = 112'd1180591620717411303424;
parameter    ap_ST_fsm_pp0_stage40 = 112'd2361183241434822606848;
parameter    ap_ST_fsm_pp0_stage41 = 112'd4722366482869645213696;
parameter    ap_ST_fsm_pp0_stage42 = 112'd9444732965739290427392;
parameter    ap_ST_fsm_pp0_stage43 = 112'd18889465931478580854784;
parameter    ap_ST_fsm_pp0_stage44 = 112'd37778931862957161709568;
parameter    ap_ST_fsm_pp0_stage45 = 112'd75557863725914323419136;
parameter    ap_ST_fsm_pp0_stage46 = 112'd151115727451828646838272;
parameter    ap_ST_fsm_pp0_stage47 = 112'd302231454903657293676544;
parameter    ap_ST_fsm_pp0_stage48 = 112'd604462909807314587353088;
parameter    ap_ST_fsm_pp0_stage49 = 112'd1208925819614629174706176;
parameter    ap_ST_fsm_pp0_stage50 = 112'd2417851639229258349412352;
parameter    ap_ST_fsm_pp0_stage51 = 112'd4835703278458516698824704;
parameter    ap_ST_fsm_pp0_stage52 = 112'd9671406556917033397649408;
parameter    ap_ST_fsm_pp0_stage53 = 112'd19342813113834066795298816;
parameter    ap_ST_fsm_pp0_stage54 = 112'd38685626227668133590597632;
parameter    ap_ST_fsm_pp0_stage55 = 112'd77371252455336267181195264;
parameter    ap_ST_fsm_pp0_stage56 = 112'd154742504910672534362390528;
parameter    ap_ST_fsm_pp0_stage57 = 112'd309485009821345068724781056;
parameter    ap_ST_fsm_pp0_stage58 = 112'd618970019642690137449562112;
parameter    ap_ST_fsm_pp0_stage59 = 112'd1237940039285380274899124224;
parameter    ap_ST_fsm_pp0_stage60 = 112'd2475880078570760549798248448;
parameter    ap_ST_fsm_pp0_stage61 = 112'd4951760157141521099596496896;
parameter    ap_ST_fsm_pp0_stage62 = 112'd9903520314283042199192993792;
parameter    ap_ST_fsm_pp0_stage63 = 112'd19807040628566084398385987584;
parameter    ap_ST_fsm_pp0_stage64 = 112'd39614081257132168796771975168;
parameter    ap_ST_fsm_pp0_stage65 = 112'd79228162514264337593543950336;
parameter    ap_ST_fsm_pp0_stage66 = 112'd158456325028528675187087900672;
parameter    ap_ST_fsm_pp0_stage67 = 112'd316912650057057350374175801344;
parameter    ap_ST_fsm_pp0_stage68 = 112'd633825300114114700748351602688;
parameter    ap_ST_fsm_pp0_stage69 = 112'd1267650600228229401496703205376;
parameter    ap_ST_fsm_pp0_stage70 = 112'd2535301200456458802993406410752;
parameter    ap_ST_fsm_pp0_stage71 = 112'd5070602400912917605986812821504;
parameter    ap_ST_fsm_pp0_stage72 = 112'd10141204801825835211973625643008;
parameter    ap_ST_fsm_pp0_stage73 = 112'd20282409603651670423947251286016;
parameter    ap_ST_fsm_pp0_stage74 = 112'd40564819207303340847894502572032;
parameter    ap_ST_fsm_pp0_stage75 = 112'd81129638414606681695789005144064;
parameter    ap_ST_fsm_pp0_stage76 = 112'd162259276829213363391578010288128;
parameter    ap_ST_fsm_pp0_stage77 = 112'd324518553658426726783156020576256;
parameter    ap_ST_fsm_pp0_stage78 = 112'd649037107316853453566312041152512;
parameter    ap_ST_fsm_pp0_stage79 = 112'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state121 = 112'd2596148429267413814265248164610048;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM2_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM2_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM2_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM2_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_USER_VALUE = 0;
parameter    C_M_AXI_GMEM2_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM2_CACHE_VALUE = 3;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM2_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output   m_axi_gmem2_AWVALID;
input   m_axi_gmem2_AWREADY;
output  [C_M_AXI_GMEM2_ADDR_WIDTH - 1:0] m_axi_gmem2_AWADDR;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_AWID;
output  [7:0] m_axi_gmem2_AWLEN;
output  [2:0] m_axi_gmem2_AWSIZE;
output  [1:0] m_axi_gmem2_AWBURST;
output  [1:0] m_axi_gmem2_AWLOCK;
output  [3:0] m_axi_gmem2_AWCACHE;
output  [2:0] m_axi_gmem2_AWPROT;
output  [3:0] m_axi_gmem2_AWQOS;
output  [3:0] m_axi_gmem2_AWREGION;
output  [C_M_AXI_GMEM2_AWUSER_WIDTH - 1:0] m_axi_gmem2_AWUSER;
output   m_axi_gmem2_WVALID;
input   m_axi_gmem2_WREADY;
output  [C_M_AXI_GMEM2_DATA_WIDTH - 1:0] m_axi_gmem2_WDATA;
output  [C_M_AXI_GMEM2_WSTRB_WIDTH - 1:0] m_axi_gmem2_WSTRB;
output   m_axi_gmem2_WLAST;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_WID;
output  [C_M_AXI_GMEM2_WUSER_WIDTH - 1:0] m_axi_gmem2_WUSER;
output   m_axi_gmem2_ARVALID;
input   m_axi_gmem2_ARREADY;
output  [C_M_AXI_GMEM2_ADDR_WIDTH - 1:0] m_axi_gmem2_ARADDR;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_ARID;
output  [7:0] m_axi_gmem2_ARLEN;
output  [2:0] m_axi_gmem2_ARSIZE;
output  [1:0] m_axi_gmem2_ARBURST;
output  [1:0] m_axi_gmem2_ARLOCK;
output  [3:0] m_axi_gmem2_ARCACHE;
output  [2:0] m_axi_gmem2_ARPROT;
output  [3:0] m_axi_gmem2_ARQOS;
output  [3:0] m_axi_gmem2_ARREGION;
output  [C_M_AXI_GMEM2_ARUSER_WIDTH - 1:0] m_axi_gmem2_ARUSER;
input   m_axi_gmem2_RVALID;
output   m_axi_gmem2_RREADY;
input  [C_M_AXI_GMEM2_DATA_WIDTH - 1:0] m_axi_gmem2_RDATA;
input   m_axi_gmem2_RLAST;
input  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_RID;
input  [C_M_AXI_GMEM2_RUSER_WIDTH - 1:0] m_axi_gmem2_RUSER;
input  [1:0] m_axi_gmem2_RRESP;
input   m_axi_gmem2_BVALID;
output   m_axi_gmem2_BREADY;
input  [1:0] m_axi_gmem2_BRESP;
input  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_BID;
input  [C_M_AXI_GMEM2_BUSER_WIDTH - 1:0] m_axi_gmem2_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [111:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] inter_pix;
wire   [31:0] out_pix;
wire    grp_getVal_fu_234_Y_blk_n_AR;
wire    grp_getVal_fu_234_Y_blk_n_R;
reg    gmem_blk_n_AR;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage3_flag00000000;
reg   [0:0] exitcond_flatten_reg_845;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10_flag00000000;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13_flag00000000;
wire    ap_CS_fsm_pp0_stage20;
wire    ap_block_pp0_stage20_flag00000000;
wire    ap_CS_fsm_pp0_stage23;
wire    ap_block_pp0_stage23_flag00000000;
wire    ap_CS_fsm_pp0_stage30;
wire    ap_block_pp0_stage30_flag00000000;
wire    ap_CS_fsm_pp0_stage33;
wire    ap_block_pp0_stage33_flag00000000;
wire    ap_CS_fsm_pp0_stage40;
wire    ap_block_pp0_stage40_flag00000000;
wire    ap_CS_fsm_pp0_stage43;
wire    ap_block_pp0_stage43_flag00000000;
wire    ap_CS_fsm_pp0_stage50;
wire    ap_block_pp0_stage50_flag00000000;
wire    ap_CS_fsm_pp0_stage53;
wire    ap_block_pp0_stage53_flag00000000;
wire    ap_CS_fsm_pp0_stage60;
wire    ap_block_pp0_stage60_flag00000000;
wire    ap_CS_fsm_pp0_stage63;
wire    ap_block_pp0_stage63_flag00000000;
wire    ap_CS_fsm_pp0_stage70;
wire    ap_block_pp0_stage70_flag00000000;
wire    ap_CS_fsm_pp0_stage73;
wire    ap_block_pp0_stage73_flag00000000;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg    gmem2_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    gmem2_blk_n_B;
wire    ap_CS_fsm_state7;
reg    gmem2_blk_n_W;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_fu_277_p2;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_flag00000000;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_845;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8_flag00000000;
wire    gmem_AWREADY;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [7:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg    gmem2_AWVALID;
wire    gmem2_AWREADY;
reg   [31:0] gmem2_AWADDR;
reg   [31:0] gmem2_AWLEN;
reg    gmem2_WVALID;
wire    gmem2_WREADY;
reg   [31:0] gmem2_WDATA;
wire    gmem2_ARREADY;
wire    gmem2_RVALID;
wire   [31:0] gmem2_RDATA;
wire    gmem2_RLAST;
wire   [0:0] gmem2_RID;
wire   [0:0] gmem2_RUSER;
wire   [1:0] gmem2_RRESP;
wire    gmem2_BVALID;
reg    gmem2_BREADY;
wire   [1:0] gmem2_BRESP;
wire   [0:0] gmem2_BID;
wire   [0:0] gmem2_BUSER;
reg   [20:0] indvar_flatten_reg_201;
reg   [10:0] y_assign_reg_212;
reg   [10:0] x_assign_reg_223;
wire   [7:0] grp_getVal_fu_234_ap_return;
reg   [7:0] reg_250;
reg    ap_block_state42_pp0_stage10_iter0;
reg    ap_block_pp0_stage10_flag00011001;
wire    ap_block_state32_pp0_stage0_iter0;
reg    ap_block_state112_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_flag00011001;
reg   [31:0] inter_pix_read_reg_754;
reg   [29:0] out_pix3_reg_759;
wire   [31:0] tmp_1_fu_264_p1;
reg   [31:0] tmp_1_reg_765;
reg    ap_sig_ioackin_gmem2_AWREADY;
wire   [30:0] tmp_1_cast_fu_267_p1;
reg   [30:0] tmp_1_cast_reg_770;
wire   [10:0] i_1_fu_283_p2;
reg    ap_sig_ioackin_gmem2_WREADY;
reg    ap_block_state3_io;
wire   [30:0] out_pix4_sum5_fu_303_p2;
reg   [30:0] out_pix4_sum5_reg_793;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond2_fu_297_p2;
wire   [15:0] i_2_fu_308_p2;
reg   [15:0] i_2_reg_798;
wire   [30:0] out_pix4_sum8_fu_334_p2;
reg   [30:0] out_pix4_sum8_reg_811;
wire    ap_CS_fsm_state16;
wire   [0:0] tmp_3_fu_328_p2;
wire   [20:0] i_3_fu_339_p2;
reg   [20:0] i_3_reg_816;
wire   [0:0] tmp_5_fu_359_p2;
wire    ap_CS_fsm_state24;
wire   [30:0] out_pix4_sum7_fu_365_p2;
reg   [30:0] out_pix4_sum7_reg_830;
wire   [20:0] i_4_fu_370_p2;
reg   [20:0] i_4_reg_835;
wire   [0:0] exitcond_flatten_fu_416_p2;
wire   [20:0] indvar_flatten_next_fu_422_p2;
reg   [20:0] indvar_flatten_next_reg_849;
wire   [10:0] y_assign_mid2_fu_486_p3;
reg   [10:0] y_assign_mid2_reg_854;
wire   [22:0] fullIndex_fu_498_p2;
reg   [22:0] fullIndex_reg_859;
wire   [10:0] x_fu_504_p2;
reg   [10:0] x_reg_865;
reg   [7:0] tmp_7_reg_870;
reg    ap_block_state52_pp0_stage20_iter0;
reg    ap_block_pp0_stage20_flag00011001;
reg   [7:0] tmp_11_reg_875;
reg    ap_block_state62_pp0_stage30_iter0;
reg    ap_block_pp0_stage30_flag00011001;
reg   [7:0] tmp_13_reg_880;
reg    ap_block_state72_pp0_stage40_iter0;
reg    ap_block_pp0_stage40_flag00011001;
reg   [7:0] tmp_14_reg_885;
reg    ap_block_state82_pp0_stage50_iter0;
reg    ap_block_pp0_stage50_flag00011001;
reg   [7:0] tmp_15_reg_890;
reg    ap_block_state92_pp0_stage60_iter0;
reg    ap_block_pp0_stage60_flag00011001;
reg   [7:0] tmp_16_reg_895;
reg    ap_block_state102_pp0_stage70_iter0;
reg    ap_block_pp0_stage70_flag00011001;
wire   [10:0] x_weight_2_fu_598_p2;
reg   [10:0] x_weight_2_reg_900;
wire    ap_CS_fsm_pp0_stage71;
wire    ap_block_state103_pp0_stage71_iter0;
wire    ap_block_pp0_stage71_flag00011001;
wire   [10:0] y_weight_2_fu_604_p2;
reg   [10:0] y_weight_2_reg_905;
wire   [7:0] tmp_18_fu_610_p1;
reg   [7:0] tmp_18_reg_910;
wire   [31:0] out_pix4_sum6_fu_614_p2;
reg   [31:0] out_pix4_sum6_reg_915;
wire   [0:0] tmp_s_fu_650_p2;
reg   [0:0] tmp_s_reg_920;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state33_pp0_stage1_iter0;
wire    ap_block_state113_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_flag00011001;
wire   [7:0] tmp_20_fu_656_p2;
reg   [7:0] tmp_20_reg_925;
wire   [7:0] tmp_21_fu_661_p2;
reg   [7:0] tmp_21_reg_930;
wire   [0:0] tmp_4_fu_667_p2;
reg   [0:0] tmp_4_reg_935;
wire   [7:0] tmp_23_fu_673_p1;
reg   [7:0] tmp_23_reg_940;
wire   [7:0] tmp_24_fu_677_p2;
reg   [7:0] tmp_24_reg_945;
wire   [7:0] edge_val_1_i_fu_731_p3;
reg   [7:0] edge_val_1_i_reg_950;
wire    ap_block_state34_pp0_stage2_iter0;
wire    ap_block_state114_pp0_stage2_iter1;
reg    ap_block_state114_io;
reg    ap_block_pp0_stage2_flag00011001;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state32;
wire    ap_block_state111_pp0_stage79_iter0;
wire    ap_block_pp0_stage79_flag00011011;
wire    ap_CS_fsm_pp0_stage79;
wire    ap_block_state40_pp0_stage8_iter0;
reg    ap_block_state120_pp0_stage8_iter1;
reg    ap_block_pp0_stage8_flag00011011;
wire    grp_getVal_fu_234_ap_start;
wire    grp_getVal_fu_234_ap_done;
wire    grp_getVal_fu_234_ap_idle;
wire    grp_getVal_fu_234_ap_ready;
wire    grp_getVal_fu_234_m_axi_Y_AWVALID;
wire   [31:0] grp_getVal_fu_234_m_axi_Y_AWADDR;
wire   [0:0] grp_getVal_fu_234_m_axi_Y_AWID;
wire   [31:0] grp_getVal_fu_234_m_axi_Y_AWLEN;
wire   [2:0] grp_getVal_fu_234_m_axi_Y_AWSIZE;
wire   [1:0] grp_getVal_fu_234_m_axi_Y_AWBURST;
wire   [1:0] grp_getVal_fu_234_m_axi_Y_AWLOCK;
wire   [3:0] grp_getVal_fu_234_m_axi_Y_AWCACHE;
wire   [2:0] grp_getVal_fu_234_m_axi_Y_AWPROT;
wire   [3:0] grp_getVal_fu_234_m_axi_Y_AWQOS;
wire   [3:0] grp_getVal_fu_234_m_axi_Y_AWREGION;
wire   [0:0] grp_getVal_fu_234_m_axi_Y_AWUSER;
wire    grp_getVal_fu_234_m_axi_Y_WVALID;
wire   [7:0] grp_getVal_fu_234_m_axi_Y_WDATA;
wire   [0:0] grp_getVal_fu_234_m_axi_Y_WSTRB;
wire    grp_getVal_fu_234_m_axi_Y_WLAST;
wire   [0:0] grp_getVal_fu_234_m_axi_Y_WID;
wire   [0:0] grp_getVal_fu_234_m_axi_Y_WUSER;
wire    grp_getVal_fu_234_m_axi_Y_ARVALID;
wire   [31:0] grp_getVal_fu_234_m_axi_Y_ARADDR;
wire   [0:0] grp_getVal_fu_234_m_axi_Y_ARID;
wire   [31:0] grp_getVal_fu_234_m_axi_Y_ARLEN;
wire   [2:0] grp_getVal_fu_234_m_axi_Y_ARSIZE;
wire   [1:0] grp_getVal_fu_234_m_axi_Y_ARBURST;
wire   [1:0] grp_getVal_fu_234_m_axi_Y_ARLOCK;
wire   [3:0] grp_getVal_fu_234_m_axi_Y_ARCACHE;
wire   [2:0] grp_getVal_fu_234_m_axi_Y_ARPROT;
wire   [3:0] grp_getVal_fu_234_m_axi_Y_ARQOS;
wire   [3:0] grp_getVal_fu_234_m_axi_Y_ARREGION;
wire   [0:0] grp_getVal_fu_234_m_axi_Y_ARUSER;
wire    grp_getVal_fu_234_m_axi_Y_RREADY;
wire    grp_getVal_fu_234_m_axi_Y_BREADY;
reg    grp_getVal_fu_234_ap_ce;
reg   [1:0] grp_getVal_fu_234_xDiff;
reg   [1:0] grp_getVal_fu_234_yDiff;
wire    ap_block_state35_pp0_stage3_iter0_ignore_call18;
wire    ap_block_state115_pp0_stage3_iter1_ignore_call18;
reg    ap_block_state115_io;
reg    ap_block_pp0_stage3_flag00011001;
wire    ap_block_state36_pp0_stage4_iter0_ignore_call18;
wire    ap_block_state116_pp0_stage4_iter1_ignore_call18;
wire    ap_block_pp0_stage4_flag00011001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state37_pp0_stage5_iter0_ignore_call18;
wire    ap_block_state117_pp0_stage5_iter1_ignore_call18;
wire    ap_block_pp0_stage5_flag00011001;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state38_pp0_stage6_iter0_ignore_call18;
wire    ap_block_state118_pp0_stage6_iter1_ignore_call18;
wire    ap_block_pp0_stage6_flag00011001;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state39_pp0_stage7_iter0_ignore_call18;
wire    ap_block_state119_pp0_stage7_iter1_ignore_call18;
wire    ap_block_pp0_stage7_flag00011001;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state40_pp0_stage8_iter0_ignore_call18;
reg    ap_block_state120_pp0_stage8_iter1_ignore_call18;
reg    ap_block_pp0_stage8_flag00011001;
wire    ap_block_state41_pp0_stage9_iter0_ignore_call18;
wire    ap_block_pp0_stage9_flag00011001;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state43_pp0_stage11_iter0_ignore_call20;
wire    ap_block_pp0_stage11_flag00011001;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state44_pp0_stage12_iter0_ignore_call20;
wire    ap_block_pp0_stage12_flag00011001;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state45_pp0_stage13_iter0_ignore_call20;
wire    ap_block_pp0_stage13_flag00011001;
wire    ap_block_state46_pp0_stage14_iter0_ignore_call20;
wire    ap_block_pp0_stage14_flag00011001;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state47_pp0_stage15_iter0_ignore_call20;
wire    ap_block_pp0_stage15_flag00011001;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_state48_pp0_stage16_iter0_ignore_call20;
wire    ap_block_pp0_stage16_flag00011001;
wire    ap_CS_fsm_pp0_stage16;
wire    ap_block_state49_pp0_stage17_iter0_ignore_call20;
wire    ap_block_pp0_stage17_flag00011001;
wire    ap_CS_fsm_pp0_stage17;
wire    ap_block_state50_pp0_stage18_iter0_ignore_call20;
wire    ap_block_pp0_stage18_flag00011001;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_state51_pp0_stage19_iter0_ignore_call20;
wire    ap_block_pp0_stage19_flag00011001;
wire    ap_CS_fsm_pp0_stage19;
wire    ap_block_state53_pp0_stage21_iter0_ignore_call23;
wire    ap_block_pp0_stage21_flag00011001;
wire    ap_CS_fsm_pp0_stage21;
wire    ap_block_state54_pp0_stage22_iter0_ignore_call23;
wire    ap_block_pp0_stage22_flag00011001;
wire    ap_CS_fsm_pp0_stage22;
wire    ap_block_state55_pp0_stage23_iter0_ignore_call23;
wire    ap_block_pp0_stage23_flag00011001;
wire    ap_block_state56_pp0_stage24_iter0_ignore_call23;
wire    ap_block_pp0_stage24_flag00011001;
wire    ap_CS_fsm_pp0_stage24;
wire    ap_block_state57_pp0_stage25_iter0_ignore_call23;
wire    ap_block_pp0_stage25_flag00011001;
wire    ap_CS_fsm_pp0_stage25;
wire    ap_block_state58_pp0_stage26_iter0_ignore_call23;
wire    ap_block_pp0_stage26_flag00011001;
wire    ap_CS_fsm_pp0_stage26;
wire    ap_block_state59_pp0_stage27_iter0_ignore_call23;
wire    ap_block_pp0_stage27_flag00011001;
wire    ap_CS_fsm_pp0_stage27;
wire    ap_block_state60_pp0_stage28_iter0_ignore_call23;
wire    ap_block_pp0_stage28_flag00011001;
wire    ap_CS_fsm_pp0_stage28;
wire    ap_block_state61_pp0_stage29_iter0_ignore_call23;
wire    ap_block_pp0_stage29_flag00011001;
wire    ap_CS_fsm_pp0_stage29;
wire    ap_block_state63_pp0_stage31_iter0_ignore_call27;
wire    ap_block_pp0_stage31_flag00011001;
wire    ap_CS_fsm_pp0_stage31;
wire    ap_block_state64_pp0_stage32_iter0_ignore_call27;
wire    ap_block_pp0_stage32_flag00011001;
wire    ap_CS_fsm_pp0_stage32;
wire    ap_block_state65_pp0_stage33_iter0_ignore_call27;
wire    ap_block_pp0_stage33_flag00011001;
wire    ap_block_state66_pp0_stage34_iter0_ignore_call27;
wire    ap_block_pp0_stage34_flag00011001;
wire    ap_CS_fsm_pp0_stage34;
wire    ap_block_state67_pp0_stage35_iter0_ignore_call27;
wire    ap_block_pp0_stage35_flag00011001;
wire    ap_CS_fsm_pp0_stage35;
wire    ap_block_state68_pp0_stage36_iter0_ignore_call27;
wire    ap_block_pp0_stage36_flag00011001;
wire    ap_CS_fsm_pp0_stage36;
wire    ap_block_state69_pp0_stage37_iter0_ignore_call27;
wire    ap_block_pp0_stage37_flag00011001;
wire    ap_CS_fsm_pp0_stage37;
wire    ap_block_state70_pp0_stage38_iter0_ignore_call27;
wire    ap_block_pp0_stage38_flag00011001;
wire    ap_CS_fsm_pp0_stage38;
wire    ap_block_state71_pp0_stage39_iter0_ignore_call27;
wire    ap_block_pp0_stage39_flag00011001;
wire    ap_CS_fsm_pp0_stage39;
wire    ap_block_state73_pp0_stage41_iter0_ignore_call31;
wire    ap_block_pp0_stage41_flag00011001;
wire    ap_CS_fsm_pp0_stage41;
wire    ap_block_state74_pp0_stage42_iter0_ignore_call31;
wire    ap_block_pp0_stage42_flag00011001;
wire    ap_CS_fsm_pp0_stage42;
wire    ap_block_state75_pp0_stage43_iter0_ignore_call31;
wire    ap_block_pp0_stage43_flag00011001;
wire    ap_block_state76_pp0_stage44_iter0_ignore_call31;
wire    ap_block_pp0_stage44_flag00011001;
wire    ap_CS_fsm_pp0_stage44;
wire    ap_block_state77_pp0_stage45_iter0_ignore_call31;
wire    ap_block_pp0_stage45_flag00011001;
wire    ap_CS_fsm_pp0_stage45;
wire    ap_block_state78_pp0_stage46_iter0_ignore_call31;
wire    ap_block_pp0_stage46_flag00011001;
wire    ap_CS_fsm_pp0_stage46;
wire    ap_block_state79_pp0_stage47_iter0_ignore_call31;
wire    ap_block_pp0_stage47_flag00011001;
wire    ap_CS_fsm_pp0_stage47;
wire    ap_block_state80_pp0_stage48_iter0_ignore_call31;
wire    ap_block_pp0_stage48_flag00011001;
wire    ap_CS_fsm_pp0_stage48;
wire    ap_block_state81_pp0_stage49_iter0_ignore_call31;
wire    ap_block_pp0_stage49_flag00011001;
wire    ap_CS_fsm_pp0_stage49;
wire    ap_block_state83_pp0_stage51_iter0_ignore_call39;
wire    ap_block_pp0_stage51_flag00011001;
wire    ap_CS_fsm_pp0_stage51;
wire    ap_block_state84_pp0_stage52_iter0_ignore_call39;
wire    ap_block_pp0_stage52_flag00011001;
wire    ap_CS_fsm_pp0_stage52;
wire    ap_block_state85_pp0_stage53_iter0_ignore_call39;
wire    ap_block_pp0_stage53_flag00011001;
wire    ap_block_state86_pp0_stage54_iter0_ignore_call39;
wire    ap_block_pp0_stage54_flag00011001;
wire    ap_CS_fsm_pp0_stage54;
wire    ap_block_state87_pp0_stage55_iter0_ignore_call39;
wire    ap_block_pp0_stage55_flag00011001;
wire    ap_CS_fsm_pp0_stage55;
wire    ap_block_state88_pp0_stage56_iter0_ignore_call39;
wire    ap_block_pp0_stage56_flag00011001;
wire    ap_CS_fsm_pp0_stage56;
wire    ap_block_state89_pp0_stage57_iter0_ignore_call39;
wire    ap_block_pp0_stage57_flag00011001;
wire    ap_CS_fsm_pp0_stage57;
wire    ap_block_state90_pp0_stage58_iter0_ignore_call39;
wire    ap_block_pp0_stage58_flag00011001;
wire    ap_CS_fsm_pp0_stage58;
wire    ap_block_state91_pp0_stage59_iter0_ignore_call39;
wire    ap_block_pp0_stage59_flag00011001;
wire    ap_CS_fsm_pp0_stage59;
wire    ap_block_state93_pp0_stage61_iter0_ignore_call43;
wire    ap_block_pp0_stage61_flag00011001;
wire    ap_CS_fsm_pp0_stage61;
wire    ap_block_state94_pp0_stage62_iter0_ignore_call43;
wire    ap_block_pp0_stage62_flag00011001;
wire    ap_CS_fsm_pp0_stage62;
wire    ap_block_state95_pp0_stage63_iter0_ignore_call43;
wire    ap_block_pp0_stage63_flag00011001;
wire    ap_block_state96_pp0_stage64_iter0_ignore_call43;
wire    ap_block_pp0_stage64_flag00011001;
wire    ap_CS_fsm_pp0_stage64;
wire    ap_block_state97_pp0_stage65_iter0_ignore_call43;
wire    ap_block_pp0_stage65_flag00011001;
wire    ap_CS_fsm_pp0_stage65;
wire    ap_block_state98_pp0_stage66_iter0_ignore_call43;
wire    ap_block_pp0_stage66_flag00011001;
wire    ap_CS_fsm_pp0_stage66;
wire    ap_block_state99_pp0_stage67_iter0_ignore_call43;
wire    ap_block_pp0_stage67_flag00011001;
wire    ap_CS_fsm_pp0_stage67;
wire    ap_block_state100_pp0_stage68_iter0_ignore_call43;
wire    ap_block_pp0_stage68_flag00011001;
wire    ap_CS_fsm_pp0_stage68;
wire    ap_block_state101_pp0_stage69_iter0_ignore_call43;
wire    ap_block_pp0_stage69_flag00011001;
wire    ap_CS_fsm_pp0_stage69;
wire    ap_block_state104_pp0_stage72_iter0_ignore_call47;
wire    ap_block_pp0_stage72_flag00011001;
wire    ap_CS_fsm_pp0_stage72;
wire    ap_block_state105_pp0_stage73_iter0_ignore_call47;
wire    ap_block_pp0_stage73_flag00011001;
wire    ap_block_state106_pp0_stage74_iter0_ignore_call47;
wire    ap_block_pp0_stage74_flag00011001;
wire    ap_CS_fsm_pp0_stage74;
wire    ap_block_state107_pp0_stage75_iter0_ignore_call47;
wire    ap_block_pp0_stage75_flag00011001;
wire    ap_CS_fsm_pp0_stage75;
wire    ap_block_state108_pp0_stage76_iter0_ignore_call47;
wire    ap_block_pp0_stage76_flag00011001;
wire    ap_CS_fsm_pp0_stage76;
wire    ap_block_state109_pp0_stage77_iter0_ignore_call47;
wire    ap_block_pp0_stage77_flag00011001;
wire    ap_CS_fsm_pp0_stage77;
wire    ap_block_state110_pp0_stage78_iter0_ignore_call47;
wire    ap_block_pp0_stage78_flag00011001;
wire    ap_CS_fsm_pp0_stage78;
wire    ap_block_state111_pp0_stage79_iter0_ignore_call47;
wire    ap_block_pp0_stage79_flag00011001;
reg   [10:0] i_reg_157;
reg   [15:0] i1_reg_168;
reg   [20:0] i2_reg_179;
reg   [20:0] i3_reg_190;
reg   [20:0] indvar_flatten_phi_fu_205_p4;
reg   [10:0] y_assign_phi_fu_216_p4;
reg   [10:0] x_assign_phi_fu_227_p4;
reg    ap_reg_grp_getVal_fu_234_ap_start;
wire    ap_block_pp0_stage1_flag00000000;
wire    ap_block_pp0_stage11_flag00000000;
wire    ap_block_pp0_stage21_flag00000000;
wire    ap_block_pp0_stage31_flag00000000;
wire    ap_block_pp0_stage41_flag00000000;
wire    ap_block_pp0_stage51_flag00000000;
wire    ap_block_pp0_stage61_flag00000000;
wire    ap_block_pp0_stage71_flag00000000;
wire    ap_block_pp0_stage4_flag00000000;
wire    ap_block_pp0_stage5_flag00000000;
wire    ap_block_pp0_stage6_flag00000000;
wire    ap_block_pp0_stage7_flag00000000;
wire    ap_block_pp0_stage9_flag00000000;
wire    ap_block_pp0_stage12_flag00000000;
wire    ap_block_pp0_stage14_flag00000000;
wire    ap_block_pp0_stage15_flag00000000;
wire    ap_block_pp0_stage16_flag00000000;
wire    ap_block_pp0_stage17_flag00000000;
wire    ap_block_pp0_stage18_flag00000000;
wire    ap_block_pp0_stage19_flag00000000;
wire    ap_block_pp0_stage22_flag00000000;
wire    ap_block_pp0_stage24_flag00000000;
wire    ap_block_pp0_stage25_flag00000000;
wire    ap_block_pp0_stage26_flag00000000;
wire    ap_block_pp0_stage27_flag00000000;
wire    ap_block_pp0_stage28_flag00000000;
wire    ap_block_pp0_stage29_flag00000000;
wire    ap_block_pp0_stage32_flag00000000;
wire    ap_block_pp0_stage34_flag00000000;
wire    ap_block_pp0_stage35_flag00000000;
wire    ap_block_pp0_stage36_flag00000000;
wire    ap_block_pp0_stage37_flag00000000;
wire    ap_block_pp0_stage38_flag00000000;
wire    ap_block_pp0_stage39_flag00000000;
wire    ap_block_pp0_stage42_flag00000000;
wire    ap_block_pp0_stage44_flag00000000;
wire    ap_block_pp0_stage45_flag00000000;
wire    ap_block_pp0_stage46_flag00000000;
wire    ap_block_pp0_stage47_flag00000000;
wire    ap_block_pp0_stage48_flag00000000;
wire    ap_block_pp0_stage49_flag00000000;
wire    ap_block_pp0_stage52_flag00000000;
wire    ap_block_pp0_stage54_flag00000000;
wire    ap_block_pp0_stage55_flag00000000;
wire    ap_block_pp0_stage56_flag00000000;
wire    ap_block_pp0_stage57_flag00000000;
wire    ap_block_pp0_stage58_flag00000000;
wire    ap_block_pp0_stage59_flag00000000;
wire    ap_block_pp0_stage62_flag00000000;
wire    ap_block_pp0_stage64_flag00000000;
wire    ap_block_pp0_stage65_flag00000000;
wire    ap_block_pp0_stage66_flag00000000;
wire    ap_block_pp0_stage67_flag00000000;
wire    ap_block_pp0_stage68_flag00000000;
wire    ap_block_pp0_stage69_flag00000000;
wire    ap_block_pp0_stage72_flag00000000;
wire    ap_block_pp0_stage74_flag00000000;
wire    ap_block_pp0_stage75_flag00000000;
wire    ap_block_pp0_stage76_flag00000000;
wire    ap_block_pp0_stage77_flag00000000;
wire    ap_block_pp0_stage78_flag00000000;
wire    ap_block_pp0_stage79_flag00000000;
wire   [31:0] out_pix4_sum5_cast_fu_314_p1;
wire   [31:0] out_pix4_sum8_cast_fu_345_p1;
wire   [31:0] out_pix4_sum7_cast_fu_376_p1;
reg    ap_reg_ioackin_gmem2_AWREADY;
reg    ap_reg_ioackin_gmem2_WREADY;
wire    ap_block_pp0_stage2_flag00001001;
reg    ap_block_state35_pp0_stage3_iter0;
wire    ap_block_state115_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_flag00001001;
wire   [31:0] tmp_19_fu_745_p5;
wire  signed [20:0] i1_cast_fu_289_p1;
wire   [30:0] i1_cast7_cast_fu_293_p1;
wire   [30:0] i2_cast_cast_fu_324_p1;
wire   [30:0] i3_cast_cast_fu_355_p1;
wire   [21:0] p_shl_fu_386_p3;
wire   [17:0] p_shl1_fu_398_p3;
wire   [22:0] p_shl_cast_fu_394_p1;
wire   [22:0] p_shl1_cast_fu_406_p1;
wire   [0:0] exitcond_fu_428_p2;
wire   [10:0] y9_fu_442_p2;
wire   [21:0] p_shl_mid1_fu_448_p3;
wire   [17:0] p_shl1_mid1_fu_460_p3;
wire   [22:0] p_shl_cast_mid1_fu_456_p1;
wire   [22:0] p_shl1_cast_mid1_fu_468_p1;
wire   [22:0] tmp_8_mid1_fu_472_p2;
wire   [22:0] tmp_8_fu_410_p2;
wire   [10:0] x_assign_mid2_fu_434_p3;
wire   [22:0] x_assign_cast4_fu_494_p1;
wire   [22:0] tmp_8_mid2_fu_478_p3;
wire   [8:0] tmp_28_0_1_fu_517_p3;
wire   [8:0] tmp_22_0_2_cast_fu_528_p1;
wire   [8:0] tmp_221_cast_fu_513_p1;
wire   [8:0] x_weight_0_2_fu_531_p2;
wire   [8:0] p_shl2_fu_541_p3;
wire  signed [10:0] x_weight_0_2_cast_fu_537_p1;
wire   [10:0] p_shl2_cast_fu_548_p1;
wire   [8:0] tmp_24_1_2_fu_558_p3;
wire   [10:0] x_weight_1_1_fu_552_p2;
wire   [10:0] tmp_24_1_2_cast_fu_565_p1;
wire   [8:0] tmp1_fu_575_p2;
wire   [9:0] tmp_28_0_1_cast_fu_524_p1;
wire   [9:0] tmp1_cast_fu_581_p1;
wire   [9:0] y_weight_1_2_fu_585_p2;
wire   [10:0] x_weight_1_2_fu_569_p2;
wire   [10:0] tmp_22_2_cast_fu_595_p1;
wire   [10:0] y_weight_1_2_cast_fu_591_p1;
wire  signed [31:0] fullIndex_cast_fu_510_p1;
wire   [8:0] p_shl3_fu_619_p3;
wire   [10:0] p_shl3_cast_fu_626_p1;
wire   [10:0] tmp_22_2_2_cast_fu_635_p1;
wire   [10:0] y_weight_2_1_fu_630_p2;
wire   [10:0] x_weight_2_2_fu_639_p2;
wire   [10:0] y_weight_2_2_fu_644_p2;
wire   [7:0] tmp_22_fu_683_p3;
wire   [7:0] tmp_25_fu_688_p3;
wire   [7:0] tmp_9_fu_693_p2;
wire   [0:0] tmp_10_fu_705_p2;
wire   [0:0] tmp_12_fu_711_p2;
wire   [0:0] tmp_26_fu_725_p2;
wire   [7:0] p_i_fu_717_p3;
wire   [7:0] edge_val_fu_699_p2;
wire    ap_CS_fsm_state121;
reg   [111:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_flag00011011;
reg    ap_block_pp0_stage2_flag00011011;
reg    ap_block_pp0_stage3_flag00011011;
wire    ap_block_state36_pp0_stage4_iter0;
wire    ap_block_state116_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_flag00011011;
wire    ap_block_state37_pp0_stage5_iter0;
wire    ap_block_state117_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_flag00011011;
wire    ap_block_state38_pp0_stage6_iter0;
wire    ap_block_state118_pp0_stage6_iter1;
wire    ap_block_pp0_stage6_flag00011011;
wire    ap_block_state39_pp0_stage7_iter0;
wire    ap_block_state119_pp0_stage7_iter1;
wire    ap_block_pp0_stage7_flag00011011;
wire    ap_block_state41_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_flag00011011;
reg    ap_block_pp0_stage10_flag00011011;
wire    ap_block_state43_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_flag00011011;
wire    ap_block_state44_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_flag00011011;
reg    ap_block_state45_pp0_stage13_iter0;
reg    ap_block_pp0_stage13_flag00011011;
wire    ap_block_state46_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_flag00011011;
wire    ap_block_state47_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_flag00011011;
wire    ap_block_state48_pp0_stage16_iter0;
wire    ap_block_pp0_stage16_flag00011011;
wire    ap_block_state49_pp0_stage17_iter0;
wire    ap_block_pp0_stage17_flag00011011;
wire    ap_block_state50_pp0_stage18_iter0;
wire    ap_block_pp0_stage18_flag00011011;
wire    ap_block_state51_pp0_stage19_iter0;
wire    ap_block_pp0_stage19_flag00011011;
reg    ap_block_pp0_stage20_flag00011011;
wire    ap_block_state53_pp0_stage21_iter0;
wire    ap_block_pp0_stage21_flag00011011;
wire    ap_block_state54_pp0_stage22_iter0;
wire    ap_block_pp0_stage22_flag00011011;
reg    ap_block_state55_pp0_stage23_iter0;
reg    ap_block_pp0_stage23_flag00011011;
wire    ap_block_state56_pp0_stage24_iter0;
wire    ap_block_pp0_stage24_flag00011011;
wire    ap_block_state57_pp0_stage25_iter0;
wire    ap_block_pp0_stage25_flag00011011;
wire    ap_block_state58_pp0_stage26_iter0;
wire    ap_block_pp0_stage26_flag00011011;
wire    ap_block_state59_pp0_stage27_iter0;
wire    ap_block_pp0_stage27_flag00011011;
wire    ap_block_state60_pp0_stage28_iter0;
wire    ap_block_pp0_stage28_flag00011011;
wire    ap_block_state61_pp0_stage29_iter0;
wire    ap_block_pp0_stage29_flag00011011;
reg    ap_block_pp0_stage30_flag00011011;
wire    ap_block_state63_pp0_stage31_iter0;
wire    ap_block_pp0_stage31_flag00011011;
wire    ap_block_state64_pp0_stage32_iter0;
wire    ap_block_pp0_stage32_flag00011011;
reg    ap_block_state65_pp0_stage33_iter0;
reg    ap_block_pp0_stage33_flag00011011;
wire    ap_block_state66_pp0_stage34_iter0;
wire    ap_block_pp0_stage34_flag00011011;
wire    ap_block_state67_pp0_stage35_iter0;
wire    ap_block_pp0_stage35_flag00011011;
wire    ap_block_state68_pp0_stage36_iter0;
wire    ap_block_pp0_stage36_flag00011011;
wire    ap_block_state69_pp0_stage37_iter0;
wire    ap_block_pp0_stage37_flag00011011;
wire    ap_block_state70_pp0_stage38_iter0;
wire    ap_block_pp0_stage38_flag00011011;
wire    ap_block_state71_pp0_stage39_iter0;
wire    ap_block_pp0_stage39_flag00011011;
reg    ap_block_pp0_stage40_flag00011011;
wire    ap_block_state73_pp0_stage41_iter0;
wire    ap_block_pp0_stage41_flag00011011;
wire    ap_block_state74_pp0_stage42_iter0;
wire    ap_block_pp0_stage42_flag00011011;
reg    ap_block_state75_pp0_stage43_iter0;
reg    ap_block_pp0_stage43_flag00011011;
wire    ap_block_state76_pp0_stage44_iter0;
wire    ap_block_pp0_stage44_flag00011011;
wire    ap_block_state77_pp0_stage45_iter0;
wire    ap_block_pp0_stage45_flag00011011;
wire    ap_block_state78_pp0_stage46_iter0;
wire    ap_block_pp0_stage46_flag00011011;
wire    ap_block_state79_pp0_stage47_iter0;
wire    ap_block_pp0_stage47_flag00011011;
wire    ap_block_state80_pp0_stage48_iter0;
wire    ap_block_pp0_stage48_flag00011011;
wire    ap_block_state81_pp0_stage49_iter0;
wire    ap_block_pp0_stage49_flag00011011;
reg    ap_block_pp0_stage50_flag00011011;
wire    ap_block_state83_pp0_stage51_iter0;
wire    ap_block_pp0_stage51_flag00011011;
wire    ap_block_state84_pp0_stage52_iter0;
wire    ap_block_pp0_stage52_flag00011011;
reg    ap_block_state85_pp0_stage53_iter0;
reg    ap_block_pp0_stage53_flag00011011;
wire    ap_block_state86_pp0_stage54_iter0;
wire    ap_block_pp0_stage54_flag00011011;
wire    ap_block_state87_pp0_stage55_iter0;
wire    ap_block_pp0_stage55_flag00011011;
wire    ap_block_state88_pp0_stage56_iter0;
wire    ap_block_pp0_stage56_flag00011011;
wire    ap_block_state89_pp0_stage57_iter0;
wire    ap_block_pp0_stage57_flag00011011;
wire    ap_block_state90_pp0_stage58_iter0;
wire    ap_block_pp0_stage58_flag00011011;
wire    ap_block_state91_pp0_stage59_iter0;
wire    ap_block_pp0_stage59_flag00011011;
reg    ap_block_pp0_stage60_flag00011011;
wire    ap_block_state93_pp0_stage61_iter0;
wire    ap_block_pp0_stage61_flag00011011;
wire    ap_block_state94_pp0_stage62_iter0;
wire    ap_block_pp0_stage62_flag00011011;
reg    ap_block_state95_pp0_stage63_iter0;
reg    ap_block_pp0_stage63_flag00011011;
wire    ap_block_state96_pp0_stage64_iter0;
wire    ap_block_pp0_stage64_flag00011011;
wire    ap_block_state97_pp0_stage65_iter0;
wire    ap_block_pp0_stage65_flag00011011;
wire    ap_block_state98_pp0_stage66_iter0;
wire    ap_block_pp0_stage66_flag00011011;
wire    ap_block_state99_pp0_stage67_iter0;
wire    ap_block_pp0_stage67_flag00011011;
wire    ap_block_state100_pp0_stage68_iter0;
wire    ap_block_pp0_stage68_flag00011011;
wire    ap_block_state101_pp0_stage69_iter0;
wire    ap_block_pp0_stage69_flag00011011;
reg    ap_block_pp0_stage70_flag00011011;
wire    ap_block_pp0_stage71_flag00011011;
wire    ap_block_state104_pp0_stage72_iter0;
wire    ap_block_pp0_stage72_flag00011011;
reg    ap_block_state105_pp0_stage73_iter0;
reg    ap_block_pp0_stage73_flag00011011;
wire    ap_block_state106_pp0_stage74_iter0;
wire    ap_block_pp0_stage74_flag00011011;
wire    ap_block_state107_pp0_stage75_iter0;
wire    ap_block_pp0_stage75_flag00011011;
wire    ap_block_state108_pp0_stage76_iter0;
wire    ap_block_pp0_stage76_flag00011011;
wire    ap_block_state109_pp0_stage77_iter0;
wire    ap_block_pp0_stage77_flag00011011;
wire    ap_block_state110_pp0_stage78_iter0;
wire    ap_block_pp0_stage78_flag00011011;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_2416;

// power-on initialization
initial begin
#0 ap_CS_fsm = 112'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_reg_grp_getVal_fu_234_ap_start = 1'b0;
#0 ap_reg_ioackin_gmem2_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem2_WREADY = 1'b0;
end

sobel_filter_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
sobel_filter_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .inter_pix(inter_pix),
    .out_pix(out_pix)
);

sobel_filter_gmem_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
sobel_filter_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(grp_getVal_fu_234_m_axi_Y_ARADDR),
    .I_ARID(grp_getVal_fu_234_m_axi_Y_ARID),
    .I_ARLEN(grp_getVal_fu_234_m_axi_Y_ARLEN),
    .I_ARSIZE(grp_getVal_fu_234_m_axi_Y_ARSIZE),
    .I_ARLOCK(grp_getVal_fu_234_m_axi_Y_ARLOCK),
    .I_ARCACHE(grp_getVal_fu_234_m_axi_Y_ARCACHE),
    .I_ARQOS(grp_getVal_fu_234_m_axi_Y_ARQOS),
    .I_ARPROT(grp_getVal_fu_234_m_axi_Y_ARPROT),
    .I_ARUSER(grp_getVal_fu_234_m_axi_Y_ARUSER),
    .I_ARBURST(grp_getVal_fu_234_m_axi_Y_ARBURST),
    .I_ARREGION(grp_getVal_fu_234_m_axi_Y_ARREGION),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(8'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd0),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

sobel_filter_gmem2_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM2_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM2_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM2_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM2_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM2_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM2_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM2_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM2_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM2_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM2_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM2_CACHE_VALUE ))
sobel_filter_gmem2_m_axi_U(
    .AWVALID(m_axi_gmem2_AWVALID),
    .AWREADY(m_axi_gmem2_AWREADY),
    .AWADDR(m_axi_gmem2_AWADDR),
    .AWID(m_axi_gmem2_AWID),
    .AWLEN(m_axi_gmem2_AWLEN),
    .AWSIZE(m_axi_gmem2_AWSIZE),
    .AWBURST(m_axi_gmem2_AWBURST),
    .AWLOCK(m_axi_gmem2_AWLOCK),
    .AWCACHE(m_axi_gmem2_AWCACHE),
    .AWPROT(m_axi_gmem2_AWPROT),
    .AWQOS(m_axi_gmem2_AWQOS),
    .AWREGION(m_axi_gmem2_AWREGION),
    .AWUSER(m_axi_gmem2_AWUSER),
    .WVALID(m_axi_gmem2_WVALID),
    .WREADY(m_axi_gmem2_WREADY),
    .WDATA(m_axi_gmem2_WDATA),
    .WSTRB(m_axi_gmem2_WSTRB),
    .WLAST(m_axi_gmem2_WLAST),
    .WID(m_axi_gmem2_WID),
    .WUSER(m_axi_gmem2_WUSER),
    .ARVALID(m_axi_gmem2_ARVALID),
    .ARREADY(m_axi_gmem2_ARREADY),
    .ARADDR(m_axi_gmem2_ARADDR),
    .ARID(m_axi_gmem2_ARID),
    .ARLEN(m_axi_gmem2_ARLEN),
    .ARSIZE(m_axi_gmem2_ARSIZE),
    .ARBURST(m_axi_gmem2_ARBURST),
    .ARLOCK(m_axi_gmem2_ARLOCK),
    .ARCACHE(m_axi_gmem2_ARCACHE),
    .ARPROT(m_axi_gmem2_ARPROT),
    .ARQOS(m_axi_gmem2_ARQOS),
    .ARREGION(m_axi_gmem2_ARREGION),
    .ARUSER(m_axi_gmem2_ARUSER),
    .RVALID(m_axi_gmem2_RVALID),
    .RREADY(m_axi_gmem2_RREADY),
    .RDATA(m_axi_gmem2_RDATA),
    .RLAST(m_axi_gmem2_RLAST),
    .RID(m_axi_gmem2_RID),
    .RUSER(m_axi_gmem2_RUSER),
    .RRESP(m_axi_gmem2_RRESP),
    .BVALID(m_axi_gmem2_BVALID),
    .BREADY(m_axi_gmem2_BREADY),
    .BRESP(m_axi_gmem2_BRESP),
    .BID(m_axi_gmem2_BID),
    .BUSER(m_axi_gmem2_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(gmem2_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem2_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(gmem2_RDATA),
    .I_RID(gmem2_RID),
    .I_RUSER(gmem2_RUSER),
    .I_RRESP(gmem2_RRESP),
    .I_RLAST(gmem2_RLAST),
    .I_AWVALID(gmem2_AWVALID),
    .I_AWREADY(gmem2_AWREADY),
    .I_AWADDR(gmem2_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(gmem2_AWLEN),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem2_WVALID),
    .I_WREADY(gmem2_WREADY),
    .I_WDATA(gmem2_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem2_BVALID),
    .I_BREADY(gmem2_BREADY),
    .I_BRESP(gmem2_BRESP),
    .I_BID(gmem2_BID),
    .I_BUSER(gmem2_BUSER)
);

getVal grp_getVal_fu_234(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_getVal_fu_234_ap_start),
    .ap_done(grp_getVal_fu_234_ap_done),
    .ap_idle(grp_getVal_fu_234_ap_idle),
    .ap_ready(grp_getVal_fu_234_ap_ready),
    .m_axi_Y_AWVALID(grp_getVal_fu_234_m_axi_Y_AWVALID),
    .m_axi_Y_AWREADY(1'b0),
    .m_axi_Y_AWADDR(grp_getVal_fu_234_m_axi_Y_AWADDR),
    .m_axi_Y_AWID(grp_getVal_fu_234_m_axi_Y_AWID),
    .m_axi_Y_AWLEN(grp_getVal_fu_234_m_axi_Y_AWLEN),
    .m_axi_Y_AWSIZE(grp_getVal_fu_234_m_axi_Y_AWSIZE),
    .m_axi_Y_AWBURST(grp_getVal_fu_234_m_axi_Y_AWBURST),
    .m_axi_Y_AWLOCK(grp_getVal_fu_234_m_axi_Y_AWLOCK),
    .m_axi_Y_AWCACHE(grp_getVal_fu_234_m_axi_Y_AWCACHE),
    .m_axi_Y_AWPROT(grp_getVal_fu_234_m_axi_Y_AWPROT),
    .m_axi_Y_AWQOS(grp_getVal_fu_234_m_axi_Y_AWQOS),
    .m_axi_Y_AWREGION(grp_getVal_fu_234_m_axi_Y_AWREGION),
    .m_axi_Y_AWUSER(grp_getVal_fu_234_m_axi_Y_AWUSER),
    .m_axi_Y_WVALID(grp_getVal_fu_234_m_axi_Y_WVALID),
    .m_axi_Y_WREADY(1'b0),
    .m_axi_Y_WDATA(grp_getVal_fu_234_m_axi_Y_WDATA),
    .m_axi_Y_WSTRB(grp_getVal_fu_234_m_axi_Y_WSTRB),
    .m_axi_Y_WLAST(grp_getVal_fu_234_m_axi_Y_WLAST),
    .m_axi_Y_WID(grp_getVal_fu_234_m_axi_Y_WID),
    .m_axi_Y_WUSER(grp_getVal_fu_234_m_axi_Y_WUSER),
    .m_axi_Y_ARVALID(grp_getVal_fu_234_m_axi_Y_ARVALID),
    .m_axi_Y_ARREADY(gmem_ARREADY),
    .m_axi_Y_ARADDR(grp_getVal_fu_234_m_axi_Y_ARADDR),
    .m_axi_Y_ARID(grp_getVal_fu_234_m_axi_Y_ARID),
    .m_axi_Y_ARLEN(grp_getVal_fu_234_m_axi_Y_ARLEN),
    .m_axi_Y_ARSIZE(grp_getVal_fu_234_m_axi_Y_ARSIZE),
    .m_axi_Y_ARBURST(grp_getVal_fu_234_m_axi_Y_ARBURST),
    .m_axi_Y_ARLOCK(grp_getVal_fu_234_m_axi_Y_ARLOCK),
    .m_axi_Y_ARCACHE(grp_getVal_fu_234_m_axi_Y_ARCACHE),
    .m_axi_Y_ARPROT(grp_getVal_fu_234_m_axi_Y_ARPROT),
    .m_axi_Y_ARQOS(grp_getVal_fu_234_m_axi_Y_ARQOS),
    .m_axi_Y_ARREGION(grp_getVal_fu_234_m_axi_Y_ARREGION),
    .m_axi_Y_ARUSER(grp_getVal_fu_234_m_axi_Y_ARUSER),
    .m_axi_Y_RVALID(gmem_RVALID),
    .m_axi_Y_RREADY(grp_getVal_fu_234_m_axi_Y_RREADY),
    .m_axi_Y_RDATA(gmem_RDATA),
    .m_axi_Y_RLAST(gmem_RLAST),
    .m_axi_Y_RID(gmem_RID),
    .m_axi_Y_RUSER(gmem_RUSER),
    .m_axi_Y_RRESP(gmem_RRESP),
    .m_axi_Y_BVALID(1'b0),
    .m_axi_Y_BREADY(grp_getVal_fu_234_m_axi_Y_BREADY),
    .m_axi_Y_BRESP(2'd0),
    .m_axi_Y_BID(1'd0),
    .m_axi_Y_BUSER(1'd0),
    .ap_ce(grp_getVal_fu_234_ap_ce),
    .index(fullIndex_reg_859),
    .xDiff(grp_getVal_fu_234_xDiff),
    .yDiff(grp_getVal_fu_234_yDiff),
    .inter_pix1(inter_pix_read_reg_754),
    .ap_return(grp_getVal_fu_234_ap_return),
    .Y_blk_n_AR(grp_getVal_fu_234_Y_blk_n_AR),
    .Y_blk_n_R(grp_getVal_fu_234_Y_blk_n_R)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state32))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state24) & (1'd0 == tmp_5_fu_359_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state32) & (((ap_block_pp0_stage79_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage79)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011011 == 1'b0))))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state32 ^ 1'b1);
        end else if ((((ap_block_pp0_stage79_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage79)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011011 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state24) & (1'd0 == tmp_5_fu_359_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_getVal_fu_234_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_416_p2)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage20) & (ap_block_pp0_stage20_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage30) & (ap_block_pp0_stage30_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage40) & (ap_block_pp0_stage40_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage50) & (ap_block_pp0_stage50_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage60) & (ap_block_pp0_stage60_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage70) & (ap_block_pp0_stage70_flag00011001 == 1'b0)))) begin
            ap_reg_grp_getVal_fu_234_ap_start <= 1'b1;
        end else if ((1'b1 == grp_getVal_fu_234_ap_ready)) begin
            ap_reg_grp_getVal_fu_234_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem2_AWREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_gmem2_AWREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (ap_sig_ioackin_gmem2_AWREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state17) & (ap_sig_ioackin_gmem2_AWREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state25) & (ap_sig_ioackin_gmem2_AWREADY == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845) & (ap_block_pp0_stage2_flag00011001 == 1'b0)))) begin
            ap_reg_ioackin_gmem2_AWREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state2) & (1'b1 == gmem2_AWREADY)) | ((1'b1 == ap_CS_fsm_state9) & (1'b1 == gmem2_AWREADY)) | ((1'b1 == ap_CS_fsm_state17) & (1'b1 == gmem2_AWREADY)) | ((1'b1 == ap_CS_fsm_state25) & (1'b1 == gmem2_AWREADY)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845) & (1'b1 == gmem2_AWREADY) & (ap_block_pp0_stage2_flag00001001 == 1'b0)))) begin
            ap_reg_ioackin_gmem2_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem2_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_fu_277_p2) & (ap_block_state3_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state10) & (ap_sig_ioackin_gmem2_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state18) & (ap_sig_ioackin_gmem2_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state26) & (ap_sig_ioackin_gmem2_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845) & (ap_block_pp0_stage3_flag00011001 == 1'b0)))) begin
            ap_reg_ioackin_gmem2_WREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_fu_277_p2) & (1'b1 == gmem2_WREADY)) | ((1'b1 == ap_CS_fsm_state10) & (1'b1 == gmem2_WREADY)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == gmem2_WREADY)) | ((1'b1 == ap_CS_fsm_state26) & (1'b1 == gmem2_WREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845) & (1'b1 == gmem2_WREADY) & (ap_block_pp0_stage3_flag00001001 == 1'b0)))) begin
            ap_reg_ioackin_gmem2_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((gmem2_BVALID == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            i1_reg_168 <= 16'd40064;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            i1_reg_168 <= i_2_reg_798;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond2_fu_297_p2 == 1'd1))) begin
        i2_reg_179 <= 21'd0;
    end else if (((1'b1 == ap_CS_fsm_state23) & (gmem2_BVALID == 1'b1))) begin
        i2_reg_179 <= i_3_reg_816;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (1'd0 == tmp_3_fu_328_p2))) begin
        i3_reg_190 <= 21'd1919;
    end else if (((1'b1 == ap_CS_fsm_state31) & (gmem2_BVALID == 1'b1))) begin
        i3_reg_190 <= i_4_reg_835;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_fu_277_p2) & (ap_block_state3_io == 1'b0))) begin
        i_reg_157 <= i_1_fu_283_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_gmem2_AWREADY == 1'b1))) begin
        i_reg_157 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'd0 == tmp_5_fu_359_p2))) begin
        indvar_flatten_reg_201 <= 21'd0;
    end else if (((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        indvar_flatten_reg_201 <= indvar_flatten_next_reg_849;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'd0 == tmp_5_fu_359_p2))) begin
        x_assign_reg_223 <= 11'd1;
    end else if (((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        x_assign_reg_223 <= x_reg_865;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'd0 == tmp_5_fu_359_p2))) begin
        y_assign_reg_212 <= 11'd1;
    end else if (((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        y_assign_reg_212 <= y_assign_mid2_reg_854;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_845 <= exitcond_flatten_reg_845;
        exitcond_flatten_reg_845 <= exitcond_flatten_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        edge_val_1_i_reg_950 <= edge_val_1_i_fu_731_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_416_p2))) begin
        fullIndex_reg_859 <= fullIndex_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond2_fu_297_p2))) begin
        i_2_reg_798 <= i_2_fu_308_p2;
        out_pix4_sum5_reg_793 <= out_pix4_sum5_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (tmp_3_fu_328_p2 == 1'd1))) begin
        i_3_reg_816 <= i_3_fu_339_p2;
        out_pix4_sum8_reg_811 <= out_pix4_sum8_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'd1 == tmp_5_fu_359_p2))) begin
        i_4_reg_835 <= i_4_fu_370_p2;
        out_pix4_sum7_reg_830 <= out_pix4_sum7_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        indvar_flatten_next_reg_849 <= indvar_flatten_next_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        inter_pix_read_reg_754 <= inter_pix;
        out_pix3_reg_759 <= {{out_pix[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage71) & (ap_block_pp0_stage71_flag00011001 == 1'b0))) begin
        out_pix4_sum6_reg_915 <= out_pix4_sum6_fu_614_p2;
        tmp_18_reg_910 <= tmp_18_fu_610_p1;
        x_weight_2_reg_900 <= x_weight_2_fu_598_p2;
        y_weight_2_reg_905 <= y_weight_2_fu_604_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0)))) begin
        reg_250 <= grp_getVal_fu_234_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage30) & (ap_block_pp0_stage30_flag00011001 == 1'b0))) begin
        tmp_11_reg_875 <= grp_getVal_fu_234_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage40) & (ap_block_pp0_stage40_flag00011001 == 1'b0))) begin
        tmp_13_reg_880 <= grp_getVal_fu_234_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage50) & (ap_block_pp0_stage50_flag00011001 == 1'b0))) begin
        tmp_14_reg_885 <= grp_getVal_fu_234_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage60) & (ap_block_pp0_stage60_flag00011001 == 1'b0))) begin
        tmp_15_reg_890 <= grp_getVal_fu_234_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage70) & (ap_block_pp0_stage70_flag00011001 == 1'b0))) begin
        tmp_16_reg_895 <= grp_getVal_fu_234_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_gmem2_AWREADY == 1'b1))) begin
        tmp_1_cast_reg_770[29 : 0] <= tmp_1_cast_fu_267_p1[29 : 0];
        tmp_1_reg_765[29 : 0] <= tmp_1_fu_264_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        tmp_20_reg_925 <= tmp_20_fu_656_p2;
        tmp_21_reg_930 <= tmp_21_fu_661_p2;
        tmp_23_reg_940 <= tmp_23_fu_673_p1;
        tmp_24_reg_945 <= tmp_24_fu_677_p2;
        tmp_4_reg_935 <= tmp_4_fu_667_p2;
        tmp_s_reg_920 <= tmp_s_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage20) & (ap_block_pp0_stage20_flag00011001 == 1'b0))) begin
        tmp_7_reg_870 <= grp_getVal_fu_234_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_416_p2))) begin
        x_reg_865 <= x_fu_504_p2;
        y_assign_mid2_reg_854 <= y_assign_mid2_fu_486_p3;
    end
end

always @ (*) begin
    if ((1'd1 == exitcond_flatten_fu_416_p2)) begin
        ap_condition_pp0_exit_iter0_state32 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state32 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state121)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state121)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem2_AWREADY)) begin
        ap_sig_ioackin_gmem2_AWREADY = gmem2_AWREADY;
    end else begin
        ap_sig_ioackin_gmem2_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem2_WREADY)) begin
        ap_sig_ioackin_gmem2_WREADY = gmem2_WREADY;
    end else begin
        ap_sig_ioackin_gmem2_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem2_AWREADY)) begin
        if ((ap_condition_2416 == 1'b1)) begin
            gmem2_AWADDR = out_pix4_sum6_reg_915;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            gmem2_AWADDR = out_pix4_sum7_cast_fu_376_p1;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            gmem2_AWADDR = out_pix4_sum8_cast_fu_345_p1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            gmem2_AWADDR = out_pix4_sum5_cast_fu_314_p1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            gmem2_AWADDR = tmp_1_fu_264_p1;
        end else begin
            gmem2_AWADDR = 'bx;
        end
    end else begin
        gmem2_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_reg_ioackin_gmem2_AWREADY)) | ((1'b1 == ap_CS_fsm_state17) & (1'b0 == ap_reg_ioackin_gmem2_AWREADY)) | ((1'b1 == ap_CS_fsm_state25) & (1'b0 == ap_reg_ioackin_gmem2_AWREADY)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845) & (1'b0 == ap_reg_ioackin_gmem2_AWREADY) & (ap_block_pp0_stage2_flag00001001 == 1'b0)))) begin
        gmem2_AWLEN = 32'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_reg_ioackin_gmem2_AWREADY))) begin
        gmem2_AWLEN = 32'd1920;
    end else begin
        gmem2_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_reg_ioackin_gmem2_AWREADY)) | ((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_reg_ioackin_gmem2_AWREADY)) | ((1'b1 == ap_CS_fsm_state17) & (1'b0 == ap_reg_ioackin_gmem2_AWREADY)) | ((1'b1 == ap_CS_fsm_state25) & (1'b0 == ap_reg_ioackin_gmem2_AWREADY)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845) & (1'b0 == ap_reg_ioackin_gmem2_AWREADY) & (ap_block_pp0_stage2_flag00001001 == 1'b0)))) begin
        gmem2_AWVALID = 1'b1;
    end else begin
        gmem2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state15) & (gmem2_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (gmem2_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (gmem2_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state31) & (gmem2_BVALID == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)))) begin
        gmem2_BREADY = 1'b1;
    end else begin
        gmem2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845) & (1'b0 == ap_reg_ioackin_gmem2_WREADY) & (ap_block_pp0_stage3_flag00001001 == 1'b0))) begin
        gmem2_WDATA = tmp_19_fu_745_p5;
    end else if ((((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_fu_277_p2) & (1'b0 == ap_reg_ioackin_gmem2_WREADY)) | ((1'b1 == ap_CS_fsm_state10) & (1'b0 == ap_reg_ioackin_gmem2_WREADY)) | ((1'b1 == ap_CS_fsm_state18) & (1'b0 == ap_reg_ioackin_gmem2_WREADY)) | ((1'b1 == ap_CS_fsm_state26) & (1'b0 == ap_reg_ioackin_gmem2_WREADY)))) begin
        gmem2_WDATA = 32'd0;
    end else begin
        gmem2_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_fu_277_p2) & (1'b0 == ap_reg_ioackin_gmem2_WREADY)) | ((1'b1 == ap_CS_fsm_state10) & (1'b0 == ap_reg_ioackin_gmem2_WREADY)) | ((1'b1 == ap_CS_fsm_state18) & (1'b0 == ap_reg_ioackin_gmem2_WREADY)) | ((1'b1 == ap_CS_fsm_state26) & (1'b0 == ap_reg_ioackin_gmem2_WREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845) & (1'b0 == ap_reg_ioackin_gmem2_WREADY) & (ap_block_pp0_stage3_flag00001001 == 1'b0)))) begin
        gmem2_WVALID = 1'b1;
    end else begin
        gmem2_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state25) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845)))) begin
        gmem2_blk_n_AW = m_axi_gmem2_AWREADY;
    end else begin
        gmem2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state31) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00000000 == 1'b0)))) begin
        gmem2_blk_n_B = m_axi_gmem2_BVALID;
    end else begin
        gmem2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_fu_277_p2)) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845)))) begin
        gmem2_blk_n_W = m_axi_gmem2_WREADY;
    end else begin
        gmem2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage3_flag00000000 == 1'b0) & (exitcond_flatten_reg_845 == 1'd0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage20) & (ap_block_pp0_stage20_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_block_pp0_stage23_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage30) & (ap_block_pp0_stage30_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage33) & (ap_block_pp0_stage33_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage40) & (ap_block_pp0_stage40_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage43) & (ap_block_pp0_stage43_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage50) & (ap_block_pp0_stage50_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage53) & (ap_block_pp0_stage53_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage60) & (ap_block_pp0_stage60_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage63) & (ap_block_pp0_stage63_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage70) & (ap_block_pp0_stage70_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage73) & (ap_block_pp0_stage73_flag00000000 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage21) & (ap_block_pp0_stage21_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage31) & (ap_block_pp0_stage31_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage41) & (ap_block_pp0_stage41_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage51) & (ap_block_pp0_stage51_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage61) & (ap_block_pp0_stage61_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage71) & (ap_block_pp0_stage71_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_block_pp0_stage14_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_block_pp0_stage15_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage16) & (ap_block_pp0_stage16_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage17) & (ap_block_pp0_stage17_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage18) & (ap_block_pp0_stage18_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_block_pp0_stage19_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage22) & (ap_block_pp0_stage22_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage24) & (ap_block_pp0_stage24_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage25) & (ap_block_pp0_stage25_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage26) & (ap_block_pp0_stage26_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage27) & (ap_block_pp0_stage27_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage28) & (ap_block_pp0_stage28_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage29) & (ap_block_pp0_stage29_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage32) & (ap_block_pp0_stage32_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage34) & (ap_block_pp0_stage34_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage35) & (ap_block_pp0_stage35_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage36) & (ap_block_pp0_stage36_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage37) & (ap_block_pp0_stage37_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage38) & (ap_block_pp0_stage38_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage39) & (ap_block_pp0_stage39_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage42) & (ap_block_pp0_stage42_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage44) & (ap_block_pp0_stage44_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage45) & (ap_block_pp0_stage45_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage46) & (ap_block_pp0_stage46_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage47) & (ap_block_pp0_stage47_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage48) & (ap_block_pp0_stage48_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage49) & (ap_block_pp0_stage49_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage52) & (ap_block_pp0_stage52_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage54) & (ap_block_pp0_stage54_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage55) & (ap_block_pp0_stage55_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage56) & (ap_block_pp0_stage56_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage57) & (ap_block_pp0_stage57_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage58) & (ap_block_pp0_stage58_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage59) & (ap_block_pp0_stage59_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage62) & (ap_block_pp0_stage62_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage64) & (ap_block_pp0_stage64_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage65) & (ap_block_pp0_stage65_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage66) & (ap_block_pp0_stage66_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage67) & (ap_block_pp0_stage67_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage68) & (ap_block_pp0_stage68_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage69) & (ap_block_pp0_stage69_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage72) & (ap_block_pp0_stage72_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage74) & (ap_block_pp0_stage74_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage75) & (ap_block_pp0_stage75_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage76) & (ap_block_pp0_stage76_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage77) & (ap_block_pp0_stage77_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage78) & (ap_block_pp0_stage78_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage79) & (ap_block_pp0_stage79_flag00000000 == 1'b0)))) begin
        gmem_ARVALID = grp_getVal_fu_234_m_axi_Y_ARVALID;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage3_flag00000000 == 1'b0) & (exitcond_flatten_reg_845 == 1'd0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage20) & (ap_block_pp0_stage20_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_block_pp0_stage23_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage30) & (ap_block_pp0_stage30_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage33) & (ap_block_pp0_stage33_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage40) & (ap_block_pp0_stage40_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage43) & (ap_block_pp0_stage43_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage50) & (ap_block_pp0_stage50_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage53) & (ap_block_pp0_stage53_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage60) & (ap_block_pp0_stage60_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage63) & (ap_block_pp0_stage63_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage70) & (ap_block_pp0_stage70_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage73) & (ap_block_pp0_stage73_flag00000000 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage21) & (ap_block_pp0_stage21_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage31) & (ap_block_pp0_stage31_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage41) & (ap_block_pp0_stage41_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage51) & (ap_block_pp0_stage51_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage61) & (ap_block_pp0_stage61_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage71) & (ap_block_pp0_stage71_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_block_pp0_stage14_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_block_pp0_stage15_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage16) & (ap_block_pp0_stage16_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage17) & (ap_block_pp0_stage17_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage18) & (ap_block_pp0_stage18_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_block_pp0_stage19_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage22) & (ap_block_pp0_stage22_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage24) & (ap_block_pp0_stage24_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage25) & (ap_block_pp0_stage25_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage26) & (ap_block_pp0_stage26_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage27) & (ap_block_pp0_stage27_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage28) & (ap_block_pp0_stage28_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage29) & (ap_block_pp0_stage29_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage32) & (ap_block_pp0_stage32_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage34) & (ap_block_pp0_stage34_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage35) & (ap_block_pp0_stage35_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage36) & (ap_block_pp0_stage36_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage37) & (ap_block_pp0_stage37_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage38) & (ap_block_pp0_stage38_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage39) & (ap_block_pp0_stage39_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage42) & (ap_block_pp0_stage42_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage44) & (ap_block_pp0_stage44_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage45) & (ap_block_pp0_stage45_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage46) & (ap_block_pp0_stage46_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage47) & (ap_block_pp0_stage47_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage48) & (ap_block_pp0_stage48_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage49) & (ap_block_pp0_stage49_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage52) & (ap_block_pp0_stage52_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage54) & (ap_block_pp0_stage54_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage55) & (ap_block_pp0_stage55_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage56) & (ap_block_pp0_stage56_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage57) & (ap_block_pp0_stage57_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage58) & (ap_block_pp0_stage58_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage59) & (ap_block_pp0_stage59_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage62) & (ap_block_pp0_stage62_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage64) & (ap_block_pp0_stage64_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage65) & (ap_block_pp0_stage65_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage66) & (ap_block_pp0_stage66_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage67) & (ap_block_pp0_stage67_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage68) & (ap_block_pp0_stage68_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage69) & (ap_block_pp0_stage69_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage72) & (ap_block_pp0_stage72_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage74) & (ap_block_pp0_stage74_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage75) & (ap_block_pp0_stage75_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage76) & (ap_block_pp0_stage76_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage77) & (ap_block_pp0_stage77_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage78) & (ap_block_pp0_stage78_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage79) & (ap_block_pp0_stage79_flag00000000 == 1'b0)))) begin
        gmem_RREADY = grp_getVal_fu_234_m_axi_Y_RREADY;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage3_flag00000000 == 1'b0) & (exitcond_flatten_reg_845 == 1'd0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage20) & (ap_block_pp0_stage20_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_block_pp0_stage23_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage30) & (ap_block_pp0_stage30_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage33) & (ap_block_pp0_stage33_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage40) & (ap_block_pp0_stage40_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage43) & (ap_block_pp0_stage43_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage50) & (ap_block_pp0_stage50_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage53) & (ap_block_pp0_stage53_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage60) & (ap_block_pp0_stage60_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage63) & (ap_block_pp0_stage63_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage70) & (ap_block_pp0_stage70_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage73) & (ap_block_pp0_stage73_flag00000000 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0)))) begin
        gmem_blk_n_AR = grp_getVal_fu_234_Y_blk_n_AR;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage3_flag00000000 == 1'b0) & (exitcond_flatten_reg_845 == 1'd0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage20) & (ap_block_pp0_stage20_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_block_pp0_stage23_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage30) & (ap_block_pp0_stage30_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage33) & (ap_block_pp0_stage33_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage40) & (ap_block_pp0_stage40_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage43) & (ap_block_pp0_stage43_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage50) & (ap_block_pp0_stage50_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage53) & (ap_block_pp0_stage53_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage60) & (ap_block_pp0_stage60_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage63) & (ap_block_pp0_stage63_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage70) & (ap_block_pp0_stage70_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage73) & (ap_block_pp0_stage73_flag00000000 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0)))) begin
        gmem_blk_n_R = grp_getVal_fu_234_Y_blk_n_R;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage71) & (ap_block_pp0_stage71_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond_flatten_reg_845 == 1'd0) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_block_pp0_stage14_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_block_pp0_stage15_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage16) & (ap_block_pp0_stage16_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage17) & (ap_block_pp0_stage17_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage18) & (ap_block_pp0_stage18_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_block_pp0_stage19_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage20) & (ap_block_pp0_stage20_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage21) & (ap_block_pp0_stage21_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage22) & (ap_block_pp0_stage22_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_block_pp0_stage23_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage24) & (ap_block_pp0_stage24_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage25) & (ap_block_pp0_stage25_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage26) & (ap_block_pp0_stage26_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage27) & (ap_block_pp0_stage27_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage28) & (ap_block_pp0_stage28_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage29) & (ap_block_pp0_stage29_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage30) & (ap_block_pp0_stage30_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage31) & (ap_block_pp0_stage31_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage32) & (ap_block_pp0_stage32_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage33) & (ap_block_pp0_stage33_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage34) & (ap_block_pp0_stage34_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage35) & (ap_block_pp0_stage35_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage36) & (ap_block_pp0_stage36_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage37) & (ap_block_pp0_stage37_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage38) & (ap_block_pp0_stage38_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage39) & (ap_block_pp0_stage39_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage40) & (ap_block_pp0_stage40_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage41) & (ap_block_pp0_stage41_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage42) & (ap_block_pp0_stage42_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage43) & (ap_block_pp0_stage43_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage44) & (ap_block_pp0_stage44_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage45) & (ap_block_pp0_stage45_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage46) & (ap_block_pp0_stage46_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage47) & (ap_block_pp0_stage47_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage48) & (ap_block_pp0_stage48_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage49) & (ap_block_pp0_stage49_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage50) & (ap_block_pp0_stage50_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage51) & (ap_block_pp0_stage51_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage52) & (ap_block_pp0_stage52_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage53) & (ap_block_pp0_stage53_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage54) & (ap_block_pp0_stage54_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage55) & (ap_block_pp0_stage55_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage56) & (ap_block_pp0_stage56_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage57) & (ap_block_pp0_stage57_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage58) & (ap_block_pp0_stage58_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage59) & (ap_block_pp0_stage59_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage60) & (ap_block_pp0_stage60_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage61) & (ap_block_pp0_stage61_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage62) & (ap_block_pp0_stage62_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage63) & (ap_block_pp0_stage63_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage64) & (ap_block_pp0_stage64_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage65) & (ap_block_pp0_stage65_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage66) & (ap_block_pp0_stage66_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage67) & (ap_block_pp0_stage67_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage68) & (ap_block_pp0_stage68_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage69) & (ap_block_pp0_stage69_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage70) & (ap_block_pp0_stage70_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage72) & (ap_block_pp0_stage72_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage73) & (ap_block_pp0_stage73_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage74) & (ap_block_pp0_stage74_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage75) & (ap_block_pp0_stage75_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage76) & (ap_block_pp0_stage76_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage77) & (ap_block_pp0_stage77_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage78) & (ap_block_pp0_stage78_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage79) & (ap_block_pp0_stage79_flag00011001 == 1'b0)) | ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)))) begin
        grp_getVal_fu_234_ap_ce = 1'b1;
    end else begin
        grp_getVal_fu_234_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage51) & (ap_block_pp0_stage51_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage61) & (ap_block_pp0_stage61_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage71) & (ap_block_pp0_stage71_flag00000000 == 1'b0)))) begin
        grp_getVal_fu_234_xDiff = 2'd1;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage31) & (ap_block_pp0_stage31_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage41) & (ap_block_pp0_stage41_flag00000000 == 1'b0)))) begin
        grp_getVal_fu_234_xDiff = 2'd0;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage21) & (ap_block_pp0_stage21_flag00000000 == 1'b0)))) begin
        grp_getVal_fu_234_xDiff = 2'd3;
    end else begin
        grp_getVal_fu_234_xDiff = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage21) & (ap_block_pp0_stage21_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage41) & (ap_block_pp0_stage41_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage71) & (ap_block_pp0_stage71_flag00000000 == 1'b0)))) begin
        grp_getVal_fu_234_yDiff = 2'd1;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage61) & (ap_block_pp0_stage61_flag00000000 == 1'b0)))) begin
        grp_getVal_fu_234_yDiff = 2'd0;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage31) & (ap_block_pp0_stage31_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage51) & (ap_block_pp0_stage51_flag00000000 == 1'b0)))) begin
        grp_getVal_fu_234_yDiff = 2'd3;
    end else begin
        grp_getVal_fu_234_yDiff = 'bx;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        indvar_flatten_phi_fu_205_p4 = indvar_flatten_next_reg_849;
    end else begin
        indvar_flatten_phi_fu_205_p4 = indvar_flatten_reg_201;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        x_assign_phi_fu_227_p4 = x_reg_865;
    end else begin
        x_assign_phi_fu_227_p4 = x_assign_reg_223;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        y_assign_phi_fu_216_p4 = y_assign_mid2_reg_854;
    end else begin
        y_assign_phi_fu_216_p4 = y_assign_reg_212;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_gmem2_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_fu_277_p2) & (ap_block_state3_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((1'b1 == ap_CS_fsm_state3) & (ap_block_state3_io == 1'b0) & (tmp_fu_277_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (gmem2_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond2_fu_297_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (ap_sig_ioackin_gmem2_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (ap_sig_ioackin_gmem2_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (gmem2_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (1'd0 == tmp_3_fu_328_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (ap_sig_ioackin_gmem2_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (ap_sig_ioackin_gmem2_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (gmem2_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (1'd0 == tmp_5_fu_359_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (ap_sig_ioackin_gmem2_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (ap_sig_ioackin_gmem2_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (gmem2_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond_flatten_fu_416_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond_flatten_fu_416_p2) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state121;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((ap_block_pp0_stage1_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((ap_block_pp0_stage2_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((ap_block_pp0_stage3_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((ap_block_pp0_stage4_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((ap_block_pp0_stage5_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((ap_block_pp0_stage6_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((ap_block_pp0_stage7_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if (((ap_block_pp0_stage8_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state121;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((ap_block_pp0_stage9_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((ap_block_pp0_stage10_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((ap_block_pp0_stage11_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((ap_block_pp0_stage12_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((ap_block_pp0_stage13_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((ap_block_pp0_stage14_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((ap_block_pp0_stage15_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((ap_block_pp0_stage16_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((ap_block_pp0_stage17_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((ap_block_pp0_stage18_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((ap_block_pp0_stage19_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((ap_block_pp0_stage20_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((ap_block_pp0_stage21_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((ap_block_pp0_stage22_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((ap_block_pp0_stage23_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_pp0_stage24 : begin
            if ((ap_block_pp0_stage24_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end
        end
        ap_ST_fsm_pp0_stage25 : begin
            if ((ap_block_pp0_stage25_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end
        end
        ap_ST_fsm_pp0_stage26 : begin
            if ((ap_block_pp0_stage26_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end
        end
        ap_ST_fsm_pp0_stage27 : begin
            if ((ap_block_pp0_stage27_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end
        end
        ap_ST_fsm_pp0_stage28 : begin
            if ((ap_block_pp0_stage28_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end
        end
        ap_ST_fsm_pp0_stage29 : begin
            if ((ap_block_pp0_stage29_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end
        end
        ap_ST_fsm_pp0_stage30 : begin
            if ((ap_block_pp0_stage30_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end
        end
        ap_ST_fsm_pp0_stage31 : begin
            if ((ap_block_pp0_stage31_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end
        end
        ap_ST_fsm_pp0_stage32 : begin
            if ((ap_block_pp0_stage32_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end
        end
        ap_ST_fsm_pp0_stage33 : begin
            if ((ap_block_pp0_stage33_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end
        end
        ap_ST_fsm_pp0_stage34 : begin
            if ((ap_block_pp0_stage34_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end
        end
        ap_ST_fsm_pp0_stage35 : begin
            if ((ap_block_pp0_stage35_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end
        end
        ap_ST_fsm_pp0_stage36 : begin
            if ((ap_block_pp0_stage36_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end
        end
        ap_ST_fsm_pp0_stage37 : begin
            if ((ap_block_pp0_stage37_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end
        end
        ap_ST_fsm_pp0_stage38 : begin
            if ((ap_block_pp0_stage38_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end
        end
        ap_ST_fsm_pp0_stage39 : begin
            if ((ap_block_pp0_stage39_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end
        end
        ap_ST_fsm_pp0_stage40 : begin
            if ((ap_block_pp0_stage40_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage40;
            end
        end
        ap_ST_fsm_pp0_stage41 : begin
            if ((ap_block_pp0_stage41_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage41;
            end
        end
        ap_ST_fsm_pp0_stage42 : begin
            if ((ap_block_pp0_stage42_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage42;
            end
        end
        ap_ST_fsm_pp0_stage43 : begin
            if ((ap_block_pp0_stage43_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage43;
            end
        end
        ap_ST_fsm_pp0_stage44 : begin
            if ((ap_block_pp0_stage44_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage44;
            end
        end
        ap_ST_fsm_pp0_stage45 : begin
            if ((ap_block_pp0_stage45_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage45;
            end
        end
        ap_ST_fsm_pp0_stage46 : begin
            if ((ap_block_pp0_stage46_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage46;
            end
        end
        ap_ST_fsm_pp0_stage47 : begin
            if ((ap_block_pp0_stage47_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage47;
            end
        end
        ap_ST_fsm_pp0_stage48 : begin
            if ((ap_block_pp0_stage48_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage48;
            end
        end
        ap_ST_fsm_pp0_stage49 : begin
            if ((ap_block_pp0_stage49_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage49;
            end
        end
        ap_ST_fsm_pp0_stage50 : begin
            if ((ap_block_pp0_stage50_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage50;
            end
        end
        ap_ST_fsm_pp0_stage51 : begin
            if ((ap_block_pp0_stage51_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage51;
            end
        end
        ap_ST_fsm_pp0_stage52 : begin
            if ((ap_block_pp0_stage52_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage52;
            end
        end
        ap_ST_fsm_pp0_stage53 : begin
            if ((ap_block_pp0_stage53_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage53;
            end
        end
        ap_ST_fsm_pp0_stage54 : begin
            if ((ap_block_pp0_stage54_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage54;
            end
        end
        ap_ST_fsm_pp0_stage55 : begin
            if ((ap_block_pp0_stage55_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage55;
            end
        end
        ap_ST_fsm_pp0_stage56 : begin
            if ((ap_block_pp0_stage56_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage56;
            end
        end
        ap_ST_fsm_pp0_stage57 : begin
            if ((ap_block_pp0_stage57_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage57;
            end
        end
        ap_ST_fsm_pp0_stage58 : begin
            if ((ap_block_pp0_stage58_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage58;
            end
        end
        ap_ST_fsm_pp0_stage59 : begin
            if ((ap_block_pp0_stage59_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage59;
            end
        end
        ap_ST_fsm_pp0_stage60 : begin
            if ((ap_block_pp0_stage60_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage60;
            end
        end
        ap_ST_fsm_pp0_stage61 : begin
            if ((ap_block_pp0_stage61_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage61;
            end
        end
        ap_ST_fsm_pp0_stage62 : begin
            if ((ap_block_pp0_stage62_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage62;
            end
        end
        ap_ST_fsm_pp0_stage63 : begin
            if ((ap_block_pp0_stage63_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage63;
            end
        end
        ap_ST_fsm_pp0_stage64 : begin
            if ((ap_block_pp0_stage64_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage64;
            end
        end
        ap_ST_fsm_pp0_stage65 : begin
            if ((ap_block_pp0_stage65_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage65;
            end
        end
        ap_ST_fsm_pp0_stage66 : begin
            if ((ap_block_pp0_stage66_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage66;
            end
        end
        ap_ST_fsm_pp0_stage67 : begin
            if ((ap_block_pp0_stage67_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage67;
            end
        end
        ap_ST_fsm_pp0_stage68 : begin
            if ((ap_block_pp0_stage68_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage68;
            end
        end
        ap_ST_fsm_pp0_stage69 : begin
            if ((ap_block_pp0_stage69_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage69;
            end
        end
        ap_ST_fsm_pp0_stage70 : begin
            if ((ap_block_pp0_stage70_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage70;
            end
        end
        ap_ST_fsm_pp0_stage71 : begin
            if ((ap_block_pp0_stage71_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage71;
            end
        end
        ap_ST_fsm_pp0_stage72 : begin
            if ((ap_block_pp0_stage72_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage72;
            end
        end
        ap_ST_fsm_pp0_stage73 : begin
            if ((ap_block_pp0_stage73_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage73;
            end
        end
        ap_ST_fsm_pp0_stage74 : begin
            if ((ap_block_pp0_stage74_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage74;
            end
        end
        ap_ST_fsm_pp0_stage75 : begin
            if ((ap_block_pp0_stage75_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage75;
            end
        end
        ap_ST_fsm_pp0_stage76 : begin
            if ((ap_block_pp0_stage76_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage76;
            end
        end
        ap_ST_fsm_pp0_stage77 : begin
            if ((ap_block_pp0_stage77_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage77;
            end
        end
        ap_ST_fsm_pp0_stage78 : begin
            if ((ap_block_pp0_stage78_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage78;
            end
        end
        ap_ST_fsm_pp0_stage79 : begin
            if ((ap_block_pp0_stage79_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage79;
            end
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_pp0_stage17 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_pp0_stage19 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp0_stage20 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_pp0_stage21 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_pp0_stage22 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_pp0_stage23 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_pp0_stage24 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_pp0_stage25 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_pp0_stage26 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_pp0_stage27 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_pp0_stage28 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_pp0_stage29 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_pp0_stage30 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_pp0_stage31 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_pp0_stage32 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_pp0_stage33 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_pp0_stage34 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_pp0_stage35 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_pp0_stage36 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_pp0_stage37 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_pp0_stage38 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_pp0_stage39 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_pp0_stage40 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_pp0_stage41 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_pp0_stage42 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_pp0_stage43 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_pp0_stage44 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_pp0_stage45 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_pp0_stage46 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_pp0_stage47 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_pp0_stage48 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_pp0_stage49 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp0_stage50 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_pp0_stage51 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_pp0_stage52 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_pp0_stage53 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_pp0_stage54 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_pp0_stage55 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_pp0_stage56 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_pp0_stage57 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_pp0_stage58 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_pp0_stage59 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_pp0_stage60 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_pp0_stage61 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_pp0_stage62 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_pp0_stage63 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_pp0_stage64 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_pp0_stage65 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_pp0_stage66 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_pp0_stage67 = ap_CS_fsm[32'd98];

assign ap_CS_fsm_pp0_stage68 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_pp0_stage69 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_pp0_stage70 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_pp0_stage71 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_pp0_stage72 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_pp0_stage73 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_pp0_stage74 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_pp0_stage75 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_pp0_stage76 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_pp0_stage77 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_pp0_stage78 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_pp0_stage79 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((exitcond_flatten_reg_845 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_pp0_stage10_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

always @ (*) begin
    ap_block_pp0_stage10_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_pp0_stage11_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_flag00011001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage13_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_pp0_stage14_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage20_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

always @ (*) begin
    ap_block_pp0_stage20_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_pp0_stage21_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_flag00011001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage23_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_pp0_stage24_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00001001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state114_io));
end

always @ (*) begin
    ap_block_pp0_stage2_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state114_io));
end

assign ap_block_pp0_stage30_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage30_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

always @ (*) begin
    ap_block_pp0_stage30_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_pp0_stage31_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_flag00011001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage33_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_pp0_stage34_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

always @ (*) begin
    ap_block_pp0_stage3_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state115_io));
end

always @ (*) begin
    ap_block_pp0_stage3_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R))) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state115_io)));
end

assign ap_block_pp0_stage40_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage40_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

always @ (*) begin
    ap_block_pp0_stage40_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_pp0_stage41_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage41_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage41_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage42_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage42_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage42_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage43_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage43_flag00011001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage43_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_pp0_stage44_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage44_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage44_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage45_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage45_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage45_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage46_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage46_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage46_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage47_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage47_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage47_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage48_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage48_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage48_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage49_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage49_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage49_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage50_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage50_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

always @ (*) begin
    ap_block_pp0_stage50_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_pp0_stage51_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage51_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage51_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage52_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage52_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage52_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage53_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage53_flag00011001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage53_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_pp0_stage54_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage54_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage54_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage55_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage55_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage55_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage56_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage56_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage56_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage57_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage57_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage57_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage58_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage58_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage58_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage59_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage59_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage59_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage60_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage60_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

always @ (*) begin
    ap_block_pp0_stage60_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_pp0_stage61_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage61_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage61_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage62_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage62_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage62_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage63_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage63_flag00011001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage63_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_pp0_stage64_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage64_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage64_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage65_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage65_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage65_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage66_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage66_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage66_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage67_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage67_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage67_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage68_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage68_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage68_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage69_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage69_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage69_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage70_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage70_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

always @ (*) begin
    ap_block_pp0_stage70_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_pp0_stage71_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage71_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage71_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage72_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage72_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage72_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage73_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage73_flag00011001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage73_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_pp0_stage74_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage74_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage74_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage75_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage75_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage75_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage76_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage76_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage76_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage77_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage77_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage77_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage78_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage78_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage78_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage79_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage79_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage79_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845) & (1'b0 == gmem2_BVALID));
end

always @ (*) begin
    ap_block_pp0_stage8_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845) & (1'b0 == gmem2_BVALID));
end

assign ap_block_pp0_stage9_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state100_pp0_stage68_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state100_pp0_stage68_iter0_ignore_call43 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp0_stage69_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp0_stage69_iter0_ignore_call43 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state102_pp0_stage70_iter0 = ((exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_state103_pp0_stage71_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state104_pp0_stage72_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state104_pp0_stage72_iter0_ignore_call47 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state105_pp0_stage73_iter0 = ((exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_state105_pp0_stage73_iter0_ignore_call47 = ~(1'b1 == 1'b1);

assign ap_block_state106_pp0_stage74_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state106_pp0_stage74_iter0_ignore_call47 = ~(1'b1 == 1'b1);

assign ap_block_state107_pp0_stage75_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state107_pp0_stage75_iter0_ignore_call47 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp0_stage76_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp0_stage76_iter0_ignore_call47 = ~(1'b1 == 1'b1);

assign ap_block_state109_pp0_stage77_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state109_pp0_stage77_iter0_ignore_call47 = ~(1'b1 == 1'b1);

assign ap_block_state110_pp0_stage78_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state110_pp0_stage78_iter0_ignore_call47 = ~(1'b1 == 1'b1);

assign ap_block_state111_pp0_stage79_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state111_pp0_stage79_iter0_ignore_call47 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state112_pp0_stage0_iter1 = ((exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_state113_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state114_io = ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845) & (1'b0 == ap_sig_ioackin_gmem2_AWREADY));
end

assign ap_block_state114_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state115_io = ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845) & (1'b0 == ap_sig_ioackin_gmem2_WREADY));
end

assign ap_block_state115_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state115_pp0_stage3_iter1_ignore_call18 = ~(1'b1 == 1'b1);

assign ap_block_state116_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state116_pp0_stage4_iter1_ignore_call18 = ~(1'b1 == 1'b1);

assign ap_block_state117_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state117_pp0_stage5_iter1_ignore_call18 = ~(1'b1 == 1'b1);

assign ap_block_state118_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state118_pp0_stage6_iter1_ignore_call18 = ~(1'b1 == 1'b1);

assign ap_block_state119_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state119_pp0_stage7_iter1_ignore_call18 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state120_pp0_stage8_iter1 = ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845) & (1'b0 == gmem2_BVALID));
end

always @ (*) begin
    ap_block_state120_pp0_stage8_iter1_ignore_call18 = ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845) & (1'b0 == gmem2_BVALID));
end

assign ap_block_state32_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state35_pp0_stage3_iter0 = ((exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_state35_pp0_stage3_iter0_ignore_call18 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage4_iter0_ignore_call18 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage5_iter0_ignore_call18 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage6_iter0_ignore_call18 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage7_iter0_ignore_call18 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((1'd0 == tmp_fu_277_p2) & (1'b0 == ap_sig_ioackin_gmem2_WREADY));
end

assign ap_block_state40_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage8_iter0_ignore_call18 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage9_iter0_ignore_call18 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state42_pp0_stage10_iter0 = ((exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_state43_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage11_iter0_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage12_iter0_ignore_call20 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state45_pp0_stage13_iter0 = ((exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_state45_pp0_stage13_iter0_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage14_iter0_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage15_iter0_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage16_iter0_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage17_iter0_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage18_iter0_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage19_iter0_ignore_call20 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state52_pp0_stage20_iter0 = ((exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_state53_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage21_iter0_ignore_call23 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage22_iter0_ignore_call23 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state55_pp0_stage23_iter0 = ((exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_state55_pp0_stage23_iter0_ignore_call23 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage24_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage24_iter0_ignore_call23 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage25_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage25_iter0_ignore_call23 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage26_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage26_iter0_ignore_call23 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage27_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage27_iter0_ignore_call23 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage28_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage28_iter0_ignore_call23 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage29_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage29_iter0_ignore_call23 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state62_pp0_stage30_iter0 = ((exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_state63_pp0_stage31_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage31_iter0_ignore_call27 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage32_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage32_iter0_ignore_call27 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state65_pp0_stage33_iter0 = ((exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_state65_pp0_stage33_iter0_ignore_call27 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage34_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage34_iter0_ignore_call27 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage35_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage35_iter0_ignore_call27 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage36_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage36_iter0_ignore_call27 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage37_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage37_iter0_ignore_call27 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage38_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage38_iter0_ignore_call27 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage39_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage39_iter0_ignore_call27 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state72_pp0_stage40_iter0 = ((exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_state73_pp0_stage41_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage41_iter0_ignore_call31 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage42_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage42_iter0_ignore_call31 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state75_pp0_stage43_iter0 = ((exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_state75_pp0_stage43_iter0_ignore_call31 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage44_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage44_iter0_ignore_call31 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage45_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage45_iter0_ignore_call31 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage46_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage46_iter0_ignore_call31 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage47_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage47_iter0_ignore_call31 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp0_stage48_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp0_stage48_iter0_ignore_call31 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp0_stage49_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp0_stage49_iter0_ignore_call31 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state82_pp0_stage50_iter0 = ((exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_state83_pp0_stage51_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp0_stage51_iter0_ignore_call39 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp0_stage52_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp0_stage52_iter0_ignore_call39 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state85_pp0_stage53_iter0 = ((exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_state85_pp0_stage53_iter0_ignore_call39 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp0_stage54_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp0_stage54_iter0_ignore_call39 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp0_stage55_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp0_stage55_iter0_ignore_call39 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp0_stage56_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp0_stage56_iter0_ignore_call39 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp0_stage57_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp0_stage57_iter0_ignore_call39 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp0_stage58_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp0_stage58_iter0_ignore_call39 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp0_stage59_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp0_stage59_iter0_ignore_call39 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state92_pp0_stage60_iter0 = ((exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_state93_pp0_stage61_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp0_stage61_iter0_ignore_call43 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp0_stage62_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp0_stage62_iter0_ignore_call43 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state95_pp0_stage63_iter0 = ((exitcond_flatten_reg_845 == 1'd0) & (1'b0 == (grp_getVal_fu_234_Y_blk_n_AR & grp_getVal_fu_234_Y_blk_n_R)));
end

assign ap_block_state95_pp0_stage63_iter0_ignore_call43 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp0_stage64_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp0_stage64_iter0_ignore_call43 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp0_stage65_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp0_stage65_iter0_ignore_call43 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp0_stage66_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp0_stage66_iter0_ignore_call43 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp0_stage67_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp0_stage67_iter0_ignore_call43 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_2416 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_845) & (ap_block_pp0_stage2_flag00001001 == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign edge_val_1_i_fu_731_p3 = ((tmp_26_fu_725_p2[0:0] === 1'b1) ? p_i_fu_717_p3 : edge_val_fu_699_p2);

assign edge_val_fu_699_p2 = (tmp_9_fu_693_p2 ^ 8'd255);

assign exitcond2_fu_297_p2 = ((i1_reg_168 == 16'd41984) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_416_p2 = ((indvar_flatten_phi_fu_205_p4 == 21'd2067604) ? 1'b1 : 1'b0);

assign exitcond_fu_428_p2 = ((x_assign_phi_fu_227_p4 == 11'd1919) ? 1'b1 : 1'b0);

assign fullIndex_cast_fu_510_p1 = $signed(fullIndex_reg_859);

assign fullIndex_fu_498_p2 = (x_assign_cast4_fu_494_p1 + tmp_8_mid2_fu_478_p3);

assign grp_getVal_fu_234_ap_start = ap_reg_grp_getVal_fu_234_ap_start;

assign i1_cast7_cast_fu_293_p1 = $unsigned(i1_cast_fu_289_p1);

assign i1_cast_fu_289_p1 = $signed(i1_reg_168);

assign i2_cast_cast_fu_324_p1 = i2_reg_179;

assign i3_cast_cast_fu_355_p1 = i3_reg_190;

assign i_1_fu_283_p2 = (i_reg_157 + 11'd1);

assign i_2_fu_308_p2 = (i1_reg_168 + 16'd1);

assign i_3_fu_339_p2 = (i2_reg_179 + 21'd1920);

assign i_4_fu_370_p2 = (i3_reg_190 + 21'd1920);

assign indvar_flatten_next_fu_422_p2 = (indvar_flatten_phi_fu_205_p4 + 21'd1);

assign out_pix4_sum5_cast_fu_314_p1 = out_pix4_sum5_reg_793;

assign out_pix4_sum5_fu_303_p2 = (tmp_1_cast_reg_770 + i1_cast7_cast_fu_293_p1);

assign out_pix4_sum6_fu_614_p2 = ($signed(fullIndex_cast_fu_510_p1) + $signed(tmp_1_reg_765));

assign out_pix4_sum7_cast_fu_376_p1 = out_pix4_sum7_reg_830;

assign out_pix4_sum7_fu_365_p2 = (tmp_1_cast_reg_770 + i3_cast_cast_fu_355_p1);

assign out_pix4_sum8_cast_fu_345_p1 = out_pix4_sum8_reg_811;

assign out_pix4_sum8_fu_334_p2 = (tmp_1_cast_reg_770 + i2_cast_cast_fu_324_p1);

assign p_i_fu_717_p3 = ((tmp_10_fu_705_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign p_shl1_cast_fu_406_p1 = p_shl1_fu_398_p3;

assign p_shl1_cast_mid1_fu_468_p1 = p_shl1_mid1_fu_460_p3;

assign p_shl1_fu_398_p3 = {{y_assign_phi_fu_216_p4}, {7'd0}};

assign p_shl1_mid1_fu_460_p3 = {{y9_fu_442_p2}, {7'd0}};

assign p_shl2_cast_fu_548_p1 = p_shl2_fu_541_p3;

assign p_shl2_fu_541_p3 = {{tmp_13_reg_880}, {1'd0}};

assign p_shl3_cast_fu_626_p1 = p_shl3_fu_619_p3;

assign p_shl3_fu_619_p3 = {{tmp_16_reg_895}, {1'd0}};

assign p_shl_cast_fu_394_p1 = p_shl_fu_386_p3;

assign p_shl_cast_mid1_fu_456_p1 = p_shl_mid1_fu_448_p3;

assign p_shl_fu_386_p3 = {{y_assign_phi_fu_216_p4}, {11'd0}};

assign p_shl_mid1_fu_448_p3 = {{y9_fu_442_p2}, {11'd0}};

assign tmp1_cast_fu_581_p1 = tmp1_fu_575_p2;

assign tmp1_fu_575_p2 = (tmp_22_0_2_cast_fu_528_p1 + tmp_221_cast_fu_513_p1);

assign tmp_10_fu_705_p2 = ((tmp_9_fu_693_p2 < 8'd55) ? 1'b1 : 1'b0);

assign tmp_12_fu_711_p2 = ((tmp_9_fu_693_p2 > 8'd155) ? 1'b1 : 1'b0);

assign tmp_18_fu_610_p1 = x_weight_2_fu_598_p2[7:0];

assign tmp_19_fu_745_p5 = {{{{edge_val_1_i_reg_950}, {edge_val_1_i_reg_950}}, {edge_val_1_i_reg_950}}, {edge_val_1_i_reg_950}};

assign tmp_1_cast_fu_267_p1 = out_pix3_reg_759;

assign tmp_1_fu_264_p1 = out_pix3_reg_759;

assign tmp_20_fu_656_p2 = (reg_250 + tmp_18_reg_910);

assign tmp_21_fu_661_p2 = (8'd0 - tmp_20_fu_656_p2);

assign tmp_221_cast_fu_513_p1 = reg_250;

assign tmp_22_0_2_cast_fu_528_p1 = tmp_11_reg_875;

assign tmp_22_2_2_cast_fu_635_p1 = reg_250;

assign tmp_22_2_cast_fu_595_p1 = tmp_15_reg_890;

assign tmp_22_fu_683_p3 = ((tmp_s_reg_920[0:0] === 1'b1) ? tmp_20_reg_925 : tmp_21_reg_930);

assign tmp_23_fu_673_p1 = y_weight_2_2_fu_644_p2[7:0];

assign tmp_24_1_2_cast_fu_565_p1 = tmp_24_1_2_fu_558_p3;

assign tmp_24_1_2_fu_558_p3 = {{tmp_14_reg_885}, {1'd0}};

assign tmp_24_fu_677_p2 = (8'd0 - tmp_23_fu_673_p1);

assign tmp_25_fu_688_p3 = ((tmp_4_reg_935[0:0] === 1'b1) ? tmp_23_reg_940 : tmp_24_reg_945);

assign tmp_26_fu_725_p2 = (tmp_10_fu_705_p2 | tmp_12_fu_711_p2);

assign tmp_28_0_1_cast_fu_524_p1 = tmp_28_0_1_fu_517_p3;

assign tmp_28_0_1_fu_517_p3 = {{tmp_7_reg_870}, {1'd0}};

assign tmp_3_fu_328_p2 = ((i2_reg_179 < 21'd2073600) ? 1'b1 : 1'b0);

assign tmp_4_fu_667_p2 = (($signed(y_weight_2_2_fu_644_p2) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign tmp_5_fu_359_p2 = ((i3_reg_190 < 21'd2073600) ? 1'b1 : 1'b0);

assign tmp_8_fu_410_p2 = (p_shl_cast_fu_394_p1 - p_shl1_cast_fu_406_p1);

assign tmp_8_mid1_fu_472_p2 = (p_shl_cast_mid1_fu_456_p1 - p_shl1_cast_mid1_fu_468_p1);

assign tmp_8_mid2_fu_478_p3 = ((exitcond_fu_428_p2[0:0] === 1'b1) ? tmp_8_mid1_fu_472_p2 : tmp_8_fu_410_p2);

assign tmp_9_fu_693_p2 = (tmp_22_fu_683_p3 + tmp_25_fu_688_p3);

assign tmp_fu_277_p2 = ((i_reg_157 == 11'd1920) ? 1'b1 : 1'b0);

assign tmp_s_fu_650_p2 = (($signed(x_weight_2_2_fu_639_p2) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign x_assign_cast4_fu_494_p1 = x_assign_mid2_fu_434_p3;

assign x_assign_mid2_fu_434_p3 = ((exitcond_fu_428_p2[0:0] === 1'b1) ? 11'd1 : x_assign_phi_fu_227_p4);

assign x_fu_504_p2 = (11'd1 + x_assign_mid2_fu_434_p3);

assign x_weight_0_2_cast_fu_537_p1 = $signed(x_weight_0_2_fu_531_p2);

assign x_weight_0_2_fu_531_p2 = (tmp_22_0_2_cast_fu_528_p1 - tmp_221_cast_fu_513_p1);

assign x_weight_1_1_fu_552_p2 = ($signed(x_weight_0_2_cast_fu_537_p1) - $signed(p_shl2_cast_fu_548_p1));

assign x_weight_1_2_fu_569_p2 = (x_weight_1_1_fu_552_p2 + tmp_24_1_2_cast_fu_565_p1);

assign x_weight_2_2_fu_639_p2 = (tmp_22_2_2_cast_fu_635_p1 + x_weight_2_reg_900);

assign x_weight_2_fu_598_p2 = (x_weight_1_2_fu_569_p2 - tmp_22_2_cast_fu_595_p1);

assign y9_fu_442_p2 = (11'd1 + y_assign_phi_fu_216_p4);

assign y_assign_mid2_fu_486_p3 = ((exitcond_fu_428_p2[0:0] === 1'b1) ? y9_fu_442_p2 : y_assign_phi_fu_216_p4);

assign y_weight_1_2_cast_fu_591_p1 = y_weight_1_2_fu_585_p2;

assign y_weight_1_2_fu_585_p2 = (tmp_28_0_1_cast_fu_524_p1 + tmp1_cast_fu_581_p1);

assign y_weight_2_1_fu_630_p2 = (y_weight_2_reg_905 - p_shl3_cast_fu_626_p1);

assign y_weight_2_2_fu_644_p2 = (y_weight_2_1_fu_630_p2 - tmp_22_2_2_cast_fu_635_p1);

assign y_weight_2_fu_604_p2 = (y_weight_1_2_cast_fu_591_p1 - tmp_22_2_cast_fu_595_p1);

always @ (posedge ap_clk) begin
    tmp_1_reg_765[31:30] <= 2'b00;
    tmp_1_cast_reg_770[30] <= 1'b0;
end

endmodule //sobel_filter
