// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "getVal.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic getVal::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic getVal::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> getVal::ap_ST_fsm_pp0_stage0 = "1";
const bool getVal::ap_const_boolean_1 = true;
const sc_lv<32> getVal::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool getVal::ap_const_boolean_0 = false;
const sc_lv<1> getVal::ap_const_lv1_0 = "0";
const sc_lv<3> getVal::ap_const_lv3_0 = "000";
const sc_lv<2> getVal::ap_const_lv2_0 = "00";
const sc_lv<4> getVal::ap_const_lv4_0 = "0000";
const sc_lv<8> getVal::ap_const_lv8_0 = "00000000";
const sc_lv<32> getVal::ap_const_lv32_1 = "1";
const sc_lv<11> getVal::ap_const_lv11_0 = "00000000000";
const sc_lv<7> getVal::ap_const_lv7_0 = "0000000";

getVal::getVal(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Y_blk_n_AR);
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( m_axi_Y_ARREADY );

    SC_METHOD(thread_Y_blk_n_R);
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( m_axi_Y_RVALID );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00001001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( m_axi_Y_RVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( m_axi_Y_RVALID );
    sensitive << ( ap_sig_ioackin_m_axi_Y_ARREADY );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011011);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( m_axi_Y_RVALID );
    sensitive << ( ap_sig_ioackin_m_axi_Y_ARREADY );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter9);
    sensitive << ( m_axi_Y_RVALID );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter6);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter7);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter8);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( ap_enable_reg_pp0_iter9 );

    SC_METHOD(thread_ap_idle_pp0_0to8);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_enable_reg_pp0_iter8 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to8 );

    SC_METHOD(thread_ap_reset_start_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to8 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( m_axi_Y_RDATA );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_Y_ARREADY);
    sensitive << ( m_axi_Y_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_Y_ARREADY );

    SC_METHOD(thread_m_axi_Y_ARADDR);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_ce );
    sensitive << ( Y_addr_reg_152 );
    sensitive << ( ap_reg_ioackin_m_axi_Y_ARREADY );
    sensitive << ( ap_block_pp0_stage0_flag00001001 );

    SC_METHOD(thread_m_axi_Y_ARBURST);

    SC_METHOD(thread_m_axi_Y_ARCACHE);

    SC_METHOD(thread_m_axi_Y_ARID);

    SC_METHOD(thread_m_axi_Y_ARLEN);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_ce );
    sensitive << ( ap_reg_ioackin_m_axi_Y_ARREADY );
    sensitive << ( ap_block_pp0_stage0_flag00001001 );

    SC_METHOD(thread_m_axi_Y_ARLOCK);

    SC_METHOD(thread_m_axi_Y_ARPROT);

    SC_METHOD(thread_m_axi_Y_ARQOS);

    SC_METHOD(thread_m_axi_Y_ARREGION);

    SC_METHOD(thread_m_axi_Y_ARSIZE);

    SC_METHOD(thread_m_axi_Y_ARUSER);

    SC_METHOD(thread_m_axi_Y_ARVALID);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_ce );
    sensitive << ( ap_reg_ioackin_m_axi_Y_ARREADY );
    sensitive << ( ap_block_pp0_stage0_flag00001001 );

    SC_METHOD(thread_m_axi_Y_AWADDR);

    SC_METHOD(thread_m_axi_Y_AWBURST);

    SC_METHOD(thread_m_axi_Y_AWCACHE);

    SC_METHOD(thread_m_axi_Y_AWID);

    SC_METHOD(thread_m_axi_Y_AWLEN);

    SC_METHOD(thread_m_axi_Y_AWLOCK);

    SC_METHOD(thread_m_axi_Y_AWPROT);

    SC_METHOD(thread_m_axi_Y_AWQOS);

    SC_METHOD(thread_m_axi_Y_AWREGION);

    SC_METHOD(thread_m_axi_Y_AWSIZE);

    SC_METHOD(thread_m_axi_Y_AWUSER);

    SC_METHOD(thread_m_axi_Y_AWVALID);

    SC_METHOD(thread_m_axi_Y_BREADY);

    SC_METHOD(thread_m_axi_Y_RREADY);
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_m_axi_Y_WDATA);

    SC_METHOD(thread_m_axi_Y_WID);

    SC_METHOD(thread_m_axi_Y_WLAST);

    SC_METHOD(thread_m_axi_Y_WSTRB);

    SC_METHOD(thread_m_axi_Y_WUSER);

    SC_METHOD(thread_m_axi_Y_WVALID);

    SC_METHOD(thread_p_shl2_cast_fu_94_p1);
    sensitive << ( p_shl2_fu_86_p3 );

    SC_METHOD(thread_p_shl2_fu_86_p3);
    sensitive << ( yDiff );

    SC_METHOD(thread_p_shl_fu_78_p3);
    sensitive << ( yDiff );

    SC_METHOD(thread_sum1_fu_131_p2);
    sensitive << ( inter_pix1_read_reg_142 );
    sensitive << ( sum_cast_fu_128_p1 );

    SC_METHOD(thread_sum_cast_fu_128_p1);
    sensitive << ( sum_reg_147 );

    SC_METHOD(thread_sum_fu_122_p2);
    sensitive << ( tmp1_cast_fu_114_p1 );
    sensitive << ( tmp_24_fu_118_p1 );

    SC_METHOD(thread_tmp1_cast_fu_114_p1);
    sensitive << ( tmp1_fu_108_p2 );

    SC_METHOD(thread_tmp1_fu_108_p2);
    sensitive << ( tmp_fu_98_p2 );
    sensitive << ( xDiff_cast_fu_104_p1 );

    SC_METHOD(thread_tmp_24_fu_118_p1);
    sensitive << ( index );

    SC_METHOD(thread_tmp_fu_98_p2);
    sensitive << ( p_shl_fu_78_p3 );
    sensitive << ( p_shl2_cast_fu_94_p1 );

    SC_METHOD(thread_xDiff_cast_fu_104_p1);
    sensitive << ( xDiff );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_flag00011011 );
    sensitive << ( ap_reset_idle_pp0 );
    sensitive << ( ap_reset_start_pp0 );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter7 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter8 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter9 = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_Y_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "getVal_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_Y_AWVALID, "(port)m_axi_Y_AWVALID");
    sc_trace(mVcdFile, m_axi_Y_AWREADY, "(port)m_axi_Y_AWREADY");
    sc_trace(mVcdFile, m_axi_Y_AWADDR, "(port)m_axi_Y_AWADDR");
    sc_trace(mVcdFile, m_axi_Y_AWID, "(port)m_axi_Y_AWID");
    sc_trace(mVcdFile, m_axi_Y_AWLEN, "(port)m_axi_Y_AWLEN");
    sc_trace(mVcdFile, m_axi_Y_AWSIZE, "(port)m_axi_Y_AWSIZE");
    sc_trace(mVcdFile, m_axi_Y_AWBURST, "(port)m_axi_Y_AWBURST");
    sc_trace(mVcdFile, m_axi_Y_AWLOCK, "(port)m_axi_Y_AWLOCK");
    sc_trace(mVcdFile, m_axi_Y_AWCACHE, "(port)m_axi_Y_AWCACHE");
    sc_trace(mVcdFile, m_axi_Y_AWPROT, "(port)m_axi_Y_AWPROT");
    sc_trace(mVcdFile, m_axi_Y_AWQOS, "(port)m_axi_Y_AWQOS");
    sc_trace(mVcdFile, m_axi_Y_AWREGION, "(port)m_axi_Y_AWREGION");
    sc_trace(mVcdFile, m_axi_Y_AWUSER, "(port)m_axi_Y_AWUSER");
    sc_trace(mVcdFile, m_axi_Y_WVALID, "(port)m_axi_Y_WVALID");
    sc_trace(mVcdFile, m_axi_Y_WREADY, "(port)m_axi_Y_WREADY");
    sc_trace(mVcdFile, m_axi_Y_WDATA, "(port)m_axi_Y_WDATA");
    sc_trace(mVcdFile, m_axi_Y_WSTRB, "(port)m_axi_Y_WSTRB");
    sc_trace(mVcdFile, m_axi_Y_WLAST, "(port)m_axi_Y_WLAST");
    sc_trace(mVcdFile, m_axi_Y_WID, "(port)m_axi_Y_WID");
    sc_trace(mVcdFile, m_axi_Y_WUSER, "(port)m_axi_Y_WUSER");
    sc_trace(mVcdFile, m_axi_Y_ARVALID, "(port)m_axi_Y_ARVALID");
    sc_trace(mVcdFile, m_axi_Y_ARREADY, "(port)m_axi_Y_ARREADY");
    sc_trace(mVcdFile, m_axi_Y_ARADDR, "(port)m_axi_Y_ARADDR");
    sc_trace(mVcdFile, m_axi_Y_ARID, "(port)m_axi_Y_ARID");
    sc_trace(mVcdFile, m_axi_Y_ARLEN, "(port)m_axi_Y_ARLEN");
    sc_trace(mVcdFile, m_axi_Y_ARSIZE, "(port)m_axi_Y_ARSIZE");
    sc_trace(mVcdFile, m_axi_Y_ARBURST, "(port)m_axi_Y_ARBURST");
    sc_trace(mVcdFile, m_axi_Y_ARLOCK, "(port)m_axi_Y_ARLOCK");
    sc_trace(mVcdFile, m_axi_Y_ARCACHE, "(port)m_axi_Y_ARCACHE");
    sc_trace(mVcdFile, m_axi_Y_ARPROT, "(port)m_axi_Y_ARPROT");
    sc_trace(mVcdFile, m_axi_Y_ARQOS, "(port)m_axi_Y_ARQOS");
    sc_trace(mVcdFile, m_axi_Y_ARREGION, "(port)m_axi_Y_ARREGION");
    sc_trace(mVcdFile, m_axi_Y_ARUSER, "(port)m_axi_Y_ARUSER");
    sc_trace(mVcdFile, m_axi_Y_RVALID, "(port)m_axi_Y_RVALID");
    sc_trace(mVcdFile, m_axi_Y_RREADY, "(port)m_axi_Y_RREADY");
    sc_trace(mVcdFile, m_axi_Y_RDATA, "(port)m_axi_Y_RDATA");
    sc_trace(mVcdFile, m_axi_Y_RLAST, "(port)m_axi_Y_RLAST");
    sc_trace(mVcdFile, m_axi_Y_RID, "(port)m_axi_Y_RID");
    sc_trace(mVcdFile, m_axi_Y_RUSER, "(port)m_axi_Y_RUSER");
    sc_trace(mVcdFile, m_axi_Y_RRESP, "(port)m_axi_Y_RRESP");
    sc_trace(mVcdFile, m_axi_Y_BVALID, "(port)m_axi_Y_BVALID");
    sc_trace(mVcdFile, m_axi_Y_BREADY, "(port)m_axi_Y_BREADY");
    sc_trace(mVcdFile, m_axi_Y_BRESP, "(port)m_axi_Y_BRESP");
    sc_trace(mVcdFile, m_axi_Y_BID, "(port)m_axi_Y_BID");
    sc_trace(mVcdFile, m_axi_Y_BUSER, "(port)m_axi_Y_BUSER");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
    sc_trace(mVcdFile, index, "(port)index");
    sc_trace(mVcdFile, xDiff, "(port)xDiff");
    sc_trace(mVcdFile, yDiff, "(port)yDiff");
    sc_trace(mVcdFile, inter_pix1, "(port)inter_pix1");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
    sc_trace(mVcdFile, Y_blk_n_AR, "(port)Y_blk_n_AR");
    sc_trace(mVcdFile, Y_blk_n_R, "(port)Y_blk_n_R");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00000000, "ap_block_pp0_stage0_flag00000000");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter7, "ap_enable_reg_pp0_iter7");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter8, "ap_enable_reg_pp0_iter8");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter9, "ap_enable_reg_pp0_iter9");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_Y_ARREADY, "ap_sig_ioackin_m_axi_Y_ARREADY");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter3, "ap_block_state4_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter4, "ap_block_state5_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter5, "ap_block_state6_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter6, "ap_block_state7_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter7, "ap_block_state8_pp0_stage0_iter7");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter8, "ap_block_state9_pp0_stage0_iter8");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter9, "ap_block_state10_pp0_stage0_iter9");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011001, "ap_block_pp0_stage0_flag00011001");
    sc_trace(mVcdFile, inter_pix1_read_reg_142, "inter_pix1_read_reg_142");
    sc_trace(mVcdFile, sum_fu_122_p2, "sum_fu_122_p2");
    sc_trace(mVcdFile, sum_reg_147, "sum_reg_147");
    sc_trace(mVcdFile, Y_addr_reg_152, "Y_addr_reg_152");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011011, "ap_block_pp0_stage0_flag00011011");
    sc_trace(mVcdFile, sum1_fu_131_p2, "sum1_fu_131_p2");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_Y_ARREADY, "ap_reg_ioackin_m_axi_Y_ARREADY");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00001001, "ap_block_pp0_stage0_flag00001001");
    sc_trace(mVcdFile, p_shl2_fu_86_p3, "p_shl2_fu_86_p3");
    sc_trace(mVcdFile, p_shl_fu_78_p3, "p_shl_fu_78_p3");
    sc_trace(mVcdFile, p_shl2_cast_fu_94_p1, "p_shl2_cast_fu_94_p1");
    sc_trace(mVcdFile, tmp_fu_98_p2, "tmp_fu_98_p2");
    sc_trace(mVcdFile, xDiff_cast_fu_104_p1, "xDiff_cast_fu_104_p1");
    sc_trace(mVcdFile, tmp1_fu_108_p2, "tmp1_fu_108_p2");
    sc_trace(mVcdFile, tmp1_cast_fu_114_p1, "tmp1_cast_fu_114_p1");
    sc_trace(mVcdFile, tmp_24_fu_118_p1, "tmp_24_fu_118_p1");
    sc_trace(mVcdFile, sum_cast_fu_128_p1, "sum_cast_fu_128_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to8, "ap_idle_pp0_0to8");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_reset_start_pp0, "ap_reset_start_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

getVal::~getVal() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void getVal::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter7 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter7 = ap_enable_reg_pp0_iter6.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter8 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter8 = ap_enable_reg_pp0_iter7.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter9 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter9 = ap_enable_reg_pp0_iter8.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_Y_ARREADY = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_m_axi_Y_ARREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axi_Y_ARREADY.read()) && 
                        esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00001001.read(), ap_const_boolean_0))) {
                ap_reg_ioackin_m_axi_Y_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        Y_addr_reg_152 = sum1_fu_131_p2.read();
        inter_pix1_read_reg_142 = inter_pix1.read();
        sum_reg_147 = sum_fu_122_p2.read();
    }
}

void getVal::thread_Y_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        Y_blk_n_AR = m_axi_Y_ARREADY.read();
    } else {
        Y_blk_n_AR = ap_const_logic_1;
    }
}

void getVal::thread_Y_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter9.read()))) {
        Y_blk_n_R = m_axi_Y_RVALID.read();
    } else {
        Y_blk_n_R = ap_const_logic_1;
    }
}

void getVal::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void getVal::thread_ap_block_pp0_stage0_flag00000000() {
    ap_block_pp0_stage0_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getVal::thread_ap_block_pp0_stage0_flag00001001() {
    ap_block_pp0_stage0_flag00001001 = ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_Y_RVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter9.read())));
}

void getVal::thread_ap_block_pp0_stage0_flag00011001() {
    ap_block_pp0_stage0_flag00011001 = ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_Y_ARREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_Y_RVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter9.read())));
}

void getVal::thread_ap_block_pp0_stage0_flag00011011() {
    ap_block_pp0_stage0_flag00011011 = ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_Y_ARREADY.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_Y_RVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter9.read())) || esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0));
}

void getVal::thread_ap_block_state10_pp0_stage0_iter9() {
    ap_block_state10_pp0_stage0_iter9 = esl_seteq<1,1,1>(ap_const_logic_0, m_axi_Y_RVALID.read());
}

void getVal::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void getVal::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getVal::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getVal::thread_ap_block_state4_pp0_stage0_iter3() {
    ap_block_state4_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getVal::thread_ap_block_state5_pp0_stage0_iter4() {
    ap_block_state5_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getVal::thread_ap_block_state6_pp0_stage0_iter5() {
    ap_block_state6_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getVal::thread_ap_block_state7_pp0_stage0_iter6() {
    ap_block_state7_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getVal::thread_ap_block_state8_pp0_stage0_iter7() {
    ap_block_state8_pp0_stage0_iter7 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getVal::thread_ap_block_state9_pp0_stage0_iter8() {
    ap_block_state9_pp0_stage0_iter8 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getVal::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter9.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void getVal::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void getVal::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void getVal::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void getVal::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter9.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void getVal::thread_ap_idle_pp0_0to8() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter8.read()))) {
        ap_idle_pp0_0to8 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to8 = ap_const_logic_0;
    }
}

void getVal::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void getVal::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to8.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void getVal::thread_ap_reset_start_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()))) {
        ap_reset_start_pp0 = ap_const_logic_1;
    } else {
        ap_reset_start_pp0 = ap_const_logic_0;
    }
}

void getVal::thread_ap_return() {
    ap_return = m_axi_Y_RDATA.read();
}

void getVal::thread_ap_sig_ioackin_m_axi_Y_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_Y_ARREADY.read())) {
        ap_sig_ioackin_m_axi_Y_ARREADY = m_axi_Y_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_Y_ARREADY = ap_const_logic_1;
    }
}

void getVal::thread_m_axi_Y_ARADDR() {
    m_axi_Y_ARADDR = Y_addr_reg_152.read();
}

void getVal::thread_m_axi_Y_ARBURST() {
    m_axi_Y_ARBURST = ap_const_lv2_0;
}

void getVal::thread_m_axi_Y_ARCACHE() {
    m_axi_Y_ARCACHE = ap_const_lv4_0;
}

void getVal::thread_m_axi_Y_ARID() {
    m_axi_Y_ARID = ap_const_lv1_0;
}

void getVal::thread_m_axi_Y_ARLEN() {
    m_axi_Y_ARLEN = ap_const_lv32_1;
}

void getVal::thread_m_axi_Y_ARLOCK() {
    m_axi_Y_ARLOCK = ap_const_lv2_0;
}

void getVal::thread_m_axi_Y_ARPROT() {
    m_axi_Y_ARPROT = ap_const_lv3_0;
}

void getVal::thread_m_axi_Y_ARQOS() {
    m_axi_Y_ARQOS = ap_const_lv4_0;
}

void getVal::thread_m_axi_Y_ARREGION() {
    m_axi_Y_ARREGION = ap_const_lv4_0;
}

void getVal::thread_m_axi_Y_ARSIZE() {
    m_axi_Y_ARSIZE = ap_const_lv3_0;
}

void getVal::thread_m_axi_Y_ARUSER() {
    m_axi_Y_ARUSER = ap_const_lv1_0;
}

void getVal::thread_m_axi_Y_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00001001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_Y_ARREADY.read()))) {
        m_axi_Y_ARVALID = ap_const_logic_1;
    } else {
        m_axi_Y_ARVALID = ap_const_logic_0;
    }
}

void getVal::thread_m_axi_Y_AWADDR() {
    m_axi_Y_AWADDR = ap_const_lv32_0;
}

void getVal::thread_m_axi_Y_AWBURST() {
    m_axi_Y_AWBURST = ap_const_lv2_0;
}

void getVal::thread_m_axi_Y_AWCACHE() {
    m_axi_Y_AWCACHE = ap_const_lv4_0;
}

void getVal::thread_m_axi_Y_AWID() {
    m_axi_Y_AWID = ap_const_lv1_0;
}

void getVal::thread_m_axi_Y_AWLEN() {
    m_axi_Y_AWLEN = ap_const_lv32_0;
}

void getVal::thread_m_axi_Y_AWLOCK() {
    m_axi_Y_AWLOCK = ap_const_lv2_0;
}

void getVal::thread_m_axi_Y_AWPROT() {
    m_axi_Y_AWPROT = ap_const_lv3_0;
}

void getVal::thread_m_axi_Y_AWQOS() {
    m_axi_Y_AWQOS = ap_const_lv4_0;
}

void getVal::thread_m_axi_Y_AWREGION() {
    m_axi_Y_AWREGION = ap_const_lv4_0;
}

void getVal::thread_m_axi_Y_AWSIZE() {
    m_axi_Y_AWSIZE = ap_const_lv3_0;
}

void getVal::thread_m_axi_Y_AWUSER() {
    m_axi_Y_AWUSER = ap_const_lv1_0;
}

void getVal::thread_m_axi_Y_AWVALID() {
    m_axi_Y_AWVALID = ap_const_logic_0;
}

void getVal::thread_m_axi_Y_BREADY() {
    m_axi_Y_BREADY = ap_const_logic_0;
}

void getVal::thread_m_axi_Y_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter9.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        m_axi_Y_RREADY = ap_const_logic_1;
    } else {
        m_axi_Y_RREADY = ap_const_logic_0;
    }
}

void getVal::thread_m_axi_Y_WDATA() {
    m_axi_Y_WDATA = ap_const_lv8_0;
}

void getVal::thread_m_axi_Y_WID() {
    m_axi_Y_WID = ap_const_lv1_0;
}

void getVal::thread_m_axi_Y_WLAST() {
    m_axi_Y_WLAST = ap_const_logic_0;
}

void getVal::thread_m_axi_Y_WSTRB() {
    m_axi_Y_WSTRB = ap_const_lv1_0;
}

void getVal::thread_m_axi_Y_WUSER() {
    m_axi_Y_WUSER = ap_const_lv1_0;
}

void getVal::thread_m_axi_Y_WVALID() {
    m_axi_Y_WVALID = ap_const_logic_0;
}

void getVal::thread_p_shl2_cast_fu_94_p1() {
    p_shl2_cast_fu_94_p1 = esl_sext<13,9>(p_shl2_fu_86_p3.read());
}

void getVal::thread_p_shl2_fu_86_p3() {
    p_shl2_fu_86_p3 = esl_concat<2,7>(yDiff.read(), ap_const_lv7_0);
}

void getVal::thread_p_shl_fu_78_p3() {
    p_shl_fu_78_p3 = esl_concat<2,11>(yDiff.read(), ap_const_lv11_0);
}

void getVal::thread_sum1_fu_131_p2() {
    sum1_fu_131_p2 = (!inter_pix1_read_reg_142.read().is_01() || !sum_cast_fu_128_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(inter_pix1_read_reg_142.read()) + sc_bigint<32>(sum_cast_fu_128_p1.read()));
}

void getVal::thread_sum_cast_fu_128_p1() {
    sum_cast_fu_128_p1 = esl_sext<32,22>(sum_reg_147.read());
}

void getVal::thread_sum_fu_122_p2() {
    sum_fu_122_p2 = (!tmp1_cast_fu_114_p1.read().is_01() || !tmp_24_fu_118_p1.read().is_01())? sc_lv<22>(): (sc_bigint<22>(tmp1_cast_fu_114_p1.read()) + sc_biguint<22>(tmp_24_fu_118_p1.read()));
}

void getVal::thread_tmp1_cast_fu_114_p1() {
    tmp1_cast_fu_114_p1 = esl_sext<22,13>(tmp1_fu_108_p2.read());
}

void getVal::thread_tmp1_fu_108_p2() {
    tmp1_fu_108_p2 = (!tmp_fu_98_p2.read().is_01() || !xDiff_cast_fu_104_p1.read().is_01())? sc_lv<13>(): (sc_biguint<13>(tmp_fu_98_p2.read()) + sc_bigint<13>(xDiff_cast_fu_104_p1.read()));
}

void getVal::thread_tmp_24_fu_118_p1() {
    tmp_24_fu_118_p1 = index.read().range(22-1, 0);
}

void getVal::thread_tmp_fu_98_p2() {
    tmp_fu_98_p2 = (!p_shl_fu_78_p3.read().is_01() || !p_shl2_cast_fu_94_p1.read().is_01())? sc_lv<13>(): (sc_biguint<13>(p_shl_fu_78_p3.read()) - sc_bigint<13>(p_shl2_cast_fu_94_p1.read()));
}

void getVal::thread_xDiff_cast_fu_104_p1() {
    xDiff_cast_fu_104_p1 = esl_sext<13,2>(xDiff.read());
}

void getVal::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

