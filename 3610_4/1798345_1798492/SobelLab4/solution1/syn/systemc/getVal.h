// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _getVal_HH_
#define _getVal_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct getVal : public sc_module {
    // Port declarations 59
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_Y_AWVALID;
    sc_in< sc_logic > m_axi_Y_AWREADY;
    sc_out< sc_lv<32> > m_axi_Y_AWADDR;
    sc_out< sc_lv<1> > m_axi_Y_AWID;
    sc_out< sc_lv<32> > m_axi_Y_AWLEN;
    sc_out< sc_lv<3> > m_axi_Y_AWSIZE;
    sc_out< sc_lv<2> > m_axi_Y_AWBURST;
    sc_out< sc_lv<2> > m_axi_Y_AWLOCK;
    sc_out< sc_lv<4> > m_axi_Y_AWCACHE;
    sc_out< sc_lv<3> > m_axi_Y_AWPROT;
    sc_out< sc_lv<4> > m_axi_Y_AWQOS;
    sc_out< sc_lv<4> > m_axi_Y_AWREGION;
    sc_out< sc_lv<1> > m_axi_Y_AWUSER;
    sc_out< sc_logic > m_axi_Y_WVALID;
    sc_in< sc_logic > m_axi_Y_WREADY;
    sc_out< sc_lv<8> > m_axi_Y_WDATA;
    sc_out< sc_lv<1> > m_axi_Y_WSTRB;
    sc_out< sc_logic > m_axi_Y_WLAST;
    sc_out< sc_lv<1> > m_axi_Y_WID;
    sc_out< sc_lv<1> > m_axi_Y_WUSER;
    sc_out< sc_logic > m_axi_Y_ARVALID;
    sc_in< sc_logic > m_axi_Y_ARREADY;
    sc_out< sc_lv<32> > m_axi_Y_ARADDR;
    sc_out< sc_lv<1> > m_axi_Y_ARID;
    sc_out< sc_lv<32> > m_axi_Y_ARLEN;
    sc_out< sc_lv<3> > m_axi_Y_ARSIZE;
    sc_out< sc_lv<2> > m_axi_Y_ARBURST;
    sc_out< sc_lv<2> > m_axi_Y_ARLOCK;
    sc_out< sc_lv<4> > m_axi_Y_ARCACHE;
    sc_out< sc_lv<3> > m_axi_Y_ARPROT;
    sc_out< sc_lv<4> > m_axi_Y_ARQOS;
    sc_out< sc_lv<4> > m_axi_Y_ARREGION;
    sc_out< sc_lv<1> > m_axi_Y_ARUSER;
    sc_in< sc_logic > m_axi_Y_RVALID;
    sc_out< sc_logic > m_axi_Y_RREADY;
    sc_in< sc_lv<8> > m_axi_Y_RDATA;
    sc_in< sc_logic > m_axi_Y_RLAST;
    sc_in< sc_lv<1> > m_axi_Y_RID;
    sc_in< sc_lv<1> > m_axi_Y_RUSER;
    sc_in< sc_lv<2> > m_axi_Y_RRESP;
    sc_in< sc_logic > m_axi_Y_BVALID;
    sc_out< sc_logic > m_axi_Y_BREADY;
    sc_in< sc_lv<2> > m_axi_Y_BRESP;
    sc_in< sc_lv<1> > m_axi_Y_BID;
    sc_in< sc_lv<1> > m_axi_Y_BUSER;
    sc_in< sc_logic > ap_ce;
    sc_in< sc_lv<23> > index;
    sc_in< sc_lv<2> > xDiff;
    sc_in< sc_lv<2> > yDiff;
    sc_in< sc_lv<32> > inter_pix1;
    sc_out< sc_lv<8> > ap_return;
    sc_out< sc_logic > Y_blk_n_AR;
    sc_out< sc_logic > Y_blk_n_R;


    // Module declarations
    getVal(sc_module_name name);
    SC_HAS_PROCESS(getVal);

    ~getVal();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0_flag00000000;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter9;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_Y_ARREADY;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter8;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter9;
    sc_signal< bool > ap_block_pp0_stage0_flag00011001;
    sc_signal< sc_lv<32> > inter_pix1_read_reg_142;
    sc_signal< sc_lv<22> > sum_fu_122_p2;
    sc_signal< sc_lv<22> > sum_reg_147;
    sc_signal< sc_lv<32> > Y_addr_reg_152;
    sc_signal< bool > ap_block_pp0_stage0_flag00011011;
    sc_signal< sc_lv<32> > sum1_fu_131_p2;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_Y_ARREADY;
    sc_signal< bool > ap_block_pp0_stage0_flag00001001;
    sc_signal< sc_lv<9> > p_shl2_fu_86_p3;
    sc_signal< sc_lv<13> > p_shl_fu_78_p3;
    sc_signal< sc_lv<13> > p_shl2_cast_fu_94_p1;
    sc_signal< sc_lv<13> > tmp_fu_98_p2;
    sc_signal< sc_lv<13> > xDiff_cast_fu_104_p1;
    sc_signal< sc_lv<13> > tmp1_fu_108_p2;
    sc_signal< sc_lv<22> > tmp1_cast_fu_114_p1;
    sc_signal< sc_lv<22> > tmp_24_fu_118_p1;
    sc_signal< sc_lv<32> > sum_cast_fu_128_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to8;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_reset_start_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<7> ap_const_lv7_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Y_blk_n_AR();
    void thread_Y_blk_n_R();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0_flag00000000();
    void thread_ap_block_pp0_stage0_flag00001001();
    void thread_ap_block_pp0_stage0_flag00011001();
    void thread_ap_block_pp0_stage0_flag00011011();
    void thread_ap_block_state10_pp0_stage0_iter9();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_block_state5_pp0_stage0_iter4();
    void thread_ap_block_state6_pp0_stage0_iter5();
    void thread_ap_block_state7_pp0_stage0_iter6();
    void thread_ap_block_state8_pp0_stage0_iter7();
    void thread_ap_block_state9_pp0_stage0_iter8();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to8();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_reset_start_pp0();
    void thread_ap_return();
    void thread_ap_sig_ioackin_m_axi_Y_ARREADY();
    void thread_m_axi_Y_ARADDR();
    void thread_m_axi_Y_ARBURST();
    void thread_m_axi_Y_ARCACHE();
    void thread_m_axi_Y_ARID();
    void thread_m_axi_Y_ARLEN();
    void thread_m_axi_Y_ARLOCK();
    void thread_m_axi_Y_ARPROT();
    void thread_m_axi_Y_ARQOS();
    void thread_m_axi_Y_ARREGION();
    void thread_m_axi_Y_ARSIZE();
    void thread_m_axi_Y_ARUSER();
    void thread_m_axi_Y_ARVALID();
    void thread_m_axi_Y_AWADDR();
    void thread_m_axi_Y_AWBURST();
    void thread_m_axi_Y_AWCACHE();
    void thread_m_axi_Y_AWID();
    void thread_m_axi_Y_AWLEN();
    void thread_m_axi_Y_AWLOCK();
    void thread_m_axi_Y_AWPROT();
    void thread_m_axi_Y_AWQOS();
    void thread_m_axi_Y_AWREGION();
    void thread_m_axi_Y_AWSIZE();
    void thread_m_axi_Y_AWUSER();
    void thread_m_axi_Y_AWVALID();
    void thread_m_axi_Y_BREADY();
    void thread_m_axi_Y_RREADY();
    void thread_m_axi_Y_WDATA();
    void thread_m_axi_Y_WID();
    void thread_m_axi_Y_WLAST();
    void thread_m_axi_Y_WSTRB();
    void thread_m_axi_Y_WUSER();
    void thread_m_axi_Y_WVALID();
    void thread_p_shl2_cast_fu_94_p1();
    void thread_p_shl2_fu_86_p3();
    void thread_p_shl_fu_78_p3();
    void thread_sum1_fu_131_p2();
    void thread_sum_cast_fu_128_p1();
    void thread_sum_fu_122_p2();
    void thread_tmp1_cast_fu_114_p1();
    void thread_tmp1_fu_108_p2();
    void thread_tmp_24_fu_118_p1();
    void thread_tmp_fu_98_p2();
    void thread_xDiff_cast_fu_104_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
