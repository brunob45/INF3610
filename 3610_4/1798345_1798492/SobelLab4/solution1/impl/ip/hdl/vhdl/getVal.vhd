-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getVal is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_Y_AWVALID : OUT STD_LOGIC;
    m_axi_Y_AWREADY : IN STD_LOGIC;
    m_axi_Y_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Y_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Y_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Y_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Y_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Y_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Y_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Y_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Y_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Y_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Y_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Y_WVALID : OUT STD_LOGIC;
    m_axi_Y_WREADY : IN STD_LOGIC;
    m_axi_Y_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_Y_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Y_WLAST : OUT STD_LOGIC;
    m_axi_Y_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Y_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Y_ARVALID : OUT STD_LOGIC;
    m_axi_Y_ARREADY : IN STD_LOGIC;
    m_axi_Y_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Y_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Y_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Y_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Y_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Y_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Y_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Y_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Y_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Y_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Y_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Y_RVALID : IN STD_LOGIC;
    m_axi_Y_RREADY : OUT STD_LOGIC;
    m_axi_Y_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_Y_RLAST : IN STD_LOGIC;
    m_axi_Y_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Y_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Y_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Y_BVALID : IN STD_LOGIC;
    m_axi_Y_BREADY : OUT STD_LOGIC;
    m_axi_Y_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Y_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Y_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_ce : IN STD_LOGIC;
    index : IN STD_LOGIC_VECTOR (22 downto 0);
    xDiff : IN STD_LOGIC_VECTOR (1 downto 0);
    yDiff : IN STD_LOGIC_VECTOR (1 downto 0);
    inter_pix1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
    Y_blk_n_AR : OUT STD_LOGIC;
    Y_blk_n_R : OUT STD_LOGIC );
end;


architecture behav of getVal is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_Y_ARREADY : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal inter_pix1_read_reg_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_fu_122_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sum_reg_147 : STD_LOGIC_VECTOR (21 downto 0);
    signal Y_addr_reg_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal sum1_fu_131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_axi_Y_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal p_shl2_fu_86_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_78_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl2_cast_fu_94_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_98_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal xDiff_cast_fu_104_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp1_fu_108_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp1_cast_fu_114_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_24_fu_118_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sum_cast_fu_128_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to8 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_reset_start_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_Y_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_Y_ARREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_ce = ap_const_logic_1))) then
                    if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_m_axi_Y_ARREADY <= ap_const_logic_0;
                    elsif (((ap_const_logic_1 = m_axi_Y_ARREADY) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0))) then 
                        ap_reg_ioackin_m_axi_Y_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_ce = ap_const_logic_1))) then
                Y_addr_reg_152 <= sum1_fu_131_p2;
                inter_pix1_read_reg_142 <= inter_pix1;
                sum_reg_147 <= sum_fu_122_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_flag00011011, ap_reset_idle_pp0, ap_reset_start_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    Y_blk_n_AR_assign_proc : process(ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter2, m_axi_Y_ARREADY)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            Y_blk_n_AR <= m_axi_Y_ARREADY;
        else 
            Y_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    Y_blk_n_R_assign_proc : process(ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter9, m_axi_Y_RVALID)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter9))) then 
            Y_blk_n_R <= m_axi_Y_RVALID;
        else 
            Y_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter9, m_axi_Y_RVALID)
    begin
                ap_block_pp0_stage0_flag00001001 <= (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_start)) or ((ap_const_logic_0 = m_axi_Y_RVALID) and (ap_const_logic_1 = ap_enable_reg_pp0_iter9)));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter9, m_axi_Y_RVALID, ap_sig_ioackin_m_axi_Y_ARREADY)
    begin
                ap_block_pp0_stage0_flag00011001 <= (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_start)) or ((ap_const_logic_0 = ap_sig_ioackin_m_axi_Y_ARREADY) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)) or ((ap_const_logic_0 = m_axi_Y_RVALID) and (ap_const_logic_1 = ap_enable_reg_pp0_iter9)));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(ap_start, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter9, m_axi_Y_RVALID, ap_sig_ioackin_m_axi_Y_ARREADY, ap_ce)
    begin
                ap_block_pp0_stage0_flag00011011 <= (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_start)) or ((ap_const_logic_0 = ap_sig_ioackin_m_axi_Y_ARREADY) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)) or ((ap_const_logic_0 = m_axi_Y_RVALID) and (ap_const_logic_1 = ap_enable_reg_pp0_iter9)) or (ap_ce = ap_const_logic_0));
    end process;


    ap_block_state10_pp0_stage0_iter9_assign_proc : process(m_axi_Y_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter9 <= (ap_const_logic_0 = m_axi_Y_RVALID);
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_const_logic_0 = ap_start);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_flag00011001, ap_ce)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_start) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_ce = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_idle_pp0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to8_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8))) then 
            ap_idle_pp0_0to8 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_start) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_ce = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to8)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_idle_pp0_0to8))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_start_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to8)
    begin
        if (((ap_const_logic_1 = ap_idle_pp0_0to8) and (ap_const_logic_1 = ap_start))) then 
            ap_reset_start_pp0 <= ap_const_logic_1;
        else 
            ap_reset_start_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= m_axi_Y_RDATA;

    ap_sig_ioackin_m_axi_Y_ARREADY_assign_proc : process(m_axi_Y_ARREADY, ap_reg_ioackin_m_axi_Y_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_Y_ARREADY)) then 
            ap_sig_ioackin_m_axi_Y_ARREADY <= m_axi_Y_ARREADY;
        else 
            ap_sig_ioackin_m_axi_Y_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_Y_ARADDR <= Y_addr_reg_152;
    m_axi_Y_ARBURST <= ap_const_lv2_0;
    m_axi_Y_ARCACHE <= ap_const_lv4_0;
    m_axi_Y_ARID <= ap_const_lv1_0;
    m_axi_Y_ARLEN <= ap_const_lv32_1;
    m_axi_Y_ARLOCK <= ap_const_lv2_0;
    m_axi_Y_ARPROT <= ap_const_lv3_0;
    m_axi_Y_ARQOS <= ap_const_lv4_0;
    m_axi_Y_ARREGION <= ap_const_lv4_0;
    m_axi_Y_ARSIZE <= ap_const_lv3_0;
    m_axi_Y_ARUSER <= ap_const_lv1_0;

    m_axi_Y_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_ce, ap_reg_ioackin_m_axi_Y_ARREADY, ap_block_pp0_stage0_flag00001001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_ce = ap_const_logic_1) and (ap_block_pp0_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_Y_ARREADY))) then 
            m_axi_Y_ARVALID <= ap_const_logic_1;
        else 
            m_axi_Y_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_Y_AWADDR <= ap_const_lv32_0;
    m_axi_Y_AWBURST <= ap_const_lv2_0;
    m_axi_Y_AWCACHE <= ap_const_lv4_0;
    m_axi_Y_AWID <= ap_const_lv1_0;
    m_axi_Y_AWLEN <= ap_const_lv32_0;
    m_axi_Y_AWLOCK <= ap_const_lv2_0;
    m_axi_Y_AWPROT <= ap_const_lv3_0;
    m_axi_Y_AWQOS <= ap_const_lv4_0;
    m_axi_Y_AWREGION <= ap_const_lv4_0;
    m_axi_Y_AWSIZE <= ap_const_lv3_0;
    m_axi_Y_AWUSER <= ap_const_lv1_0;
    m_axi_Y_AWVALID <= ap_const_logic_0;
    m_axi_Y_BREADY <= ap_const_logic_0;

    m_axi_Y_RREADY_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_flag00011001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_ce = ap_const_logic_1))) then 
            m_axi_Y_RREADY <= ap_const_logic_1;
        else 
            m_axi_Y_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_Y_WDATA <= ap_const_lv8_0;
    m_axi_Y_WID <= ap_const_lv1_0;
    m_axi_Y_WLAST <= ap_const_logic_0;
    m_axi_Y_WSTRB <= ap_const_lv1_0;
    m_axi_Y_WUSER <= ap_const_lv1_0;
    m_axi_Y_WVALID <= ap_const_logic_0;
        p_shl2_cast_fu_94_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl2_fu_86_p3),13));

    p_shl2_fu_86_p3 <= (yDiff & ap_const_lv7_0);
    p_shl_fu_78_p3 <= (yDiff & ap_const_lv11_0);
    sum1_fu_131_p2 <= std_logic_vector(unsigned(inter_pix1_read_reg_142) + unsigned(sum_cast_fu_128_p1));
        sum_cast_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_reg_147),32));

    sum_fu_122_p2 <= std_logic_vector(signed(tmp1_cast_fu_114_p1) + signed(tmp_24_fu_118_p1));
        tmp1_cast_fu_114_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_108_p2),22));

    tmp1_fu_108_p2 <= std_logic_vector(unsigned(tmp_fu_98_p2) + unsigned(xDiff_cast_fu_104_p1));
    tmp_24_fu_118_p1 <= index(22 - 1 downto 0);
    tmp_fu_98_p2 <= std_logic_vector(unsigned(p_shl_fu_78_p3) - unsigned(p_shl2_cast_fu_94_p1));
        xDiff_cast_fu_104_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xDiff),13));

end behav;
