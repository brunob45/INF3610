// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module getVal (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_Y_AWVALID,
        m_axi_Y_AWREADY,
        m_axi_Y_AWADDR,
        m_axi_Y_AWID,
        m_axi_Y_AWLEN,
        m_axi_Y_AWSIZE,
        m_axi_Y_AWBURST,
        m_axi_Y_AWLOCK,
        m_axi_Y_AWCACHE,
        m_axi_Y_AWPROT,
        m_axi_Y_AWQOS,
        m_axi_Y_AWREGION,
        m_axi_Y_AWUSER,
        m_axi_Y_WVALID,
        m_axi_Y_WREADY,
        m_axi_Y_WDATA,
        m_axi_Y_WSTRB,
        m_axi_Y_WLAST,
        m_axi_Y_WID,
        m_axi_Y_WUSER,
        m_axi_Y_ARVALID,
        m_axi_Y_ARREADY,
        m_axi_Y_ARADDR,
        m_axi_Y_ARID,
        m_axi_Y_ARLEN,
        m_axi_Y_ARSIZE,
        m_axi_Y_ARBURST,
        m_axi_Y_ARLOCK,
        m_axi_Y_ARCACHE,
        m_axi_Y_ARPROT,
        m_axi_Y_ARQOS,
        m_axi_Y_ARREGION,
        m_axi_Y_ARUSER,
        m_axi_Y_RVALID,
        m_axi_Y_RREADY,
        m_axi_Y_RDATA,
        m_axi_Y_RLAST,
        m_axi_Y_RID,
        m_axi_Y_RUSER,
        m_axi_Y_RRESP,
        m_axi_Y_BVALID,
        m_axi_Y_BREADY,
        m_axi_Y_BRESP,
        m_axi_Y_BID,
        m_axi_Y_BUSER,
        ap_ce,
        index,
        xDiff,
        yDiff,
        inter_pix1,
        ap_return,
        Y_blk_n_AR,
        Y_blk_n_R
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_Y_AWVALID;
input   m_axi_Y_AWREADY;
output  [31:0] m_axi_Y_AWADDR;
output  [0:0] m_axi_Y_AWID;
output  [31:0] m_axi_Y_AWLEN;
output  [2:0] m_axi_Y_AWSIZE;
output  [1:0] m_axi_Y_AWBURST;
output  [1:0] m_axi_Y_AWLOCK;
output  [3:0] m_axi_Y_AWCACHE;
output  [2:0] m_axi_Y_AWPROT;
output  [3:0] m_axi_Y_AWQOS;
output  [3:0] m_axi_Y_AWREGION;
output  [0:0] m_axi_Y_AWUSER;
output   m_axi_Y_WVALID;
input   m_axi_Y_WREADY;
output  [7:0] m_axi_Y_WDATA;
output  [0:0] m_axi_Y_WSTRB;
output   m_axi_Y_WLAST;
output  [0:0] m_axi_Y_WID;
output  [0:0] m_axi_Y_WUSER;
output   m_axi_Y_ARVALID;
input   m_axi_Y_ARREADY;
output  [31:0] m_axi_Y_ARADDR;
output  [0:0] m_axi_Y_ARID;
output  [31:0] m_axi_Y_ARLEN;
output  [2:0] m_axi_Y_ARSIZE;
output  [1:0] m_axi_Y_ARBURST;
output  [1:0] m_axi_Y_ARLOCK;
output  [3:0] m_axi_Y_ARCACHE;
output  [2:0] m_axi_Y_ARPROT;
output  [3:0] m_axi_Y_ARQOS;
output  [3:0] m_axi_Y_ARREGION;
output  [0:0] m_axi_Y_ARUSER;
input   m_axi_Y_RVALID;
output   m_axi_Y_RREADY;
input  [7:0] m_axi_Y_RDATA;
input   m_axi_Y_RLAST;
input  [0:0] m_axi_Y_RID;
input  [0:0] m_axi_Y_RUSER;
input  [1:0] m_axi_Y_RRESP;
input   m_axi_Y_BVALID;
output   m_axi_Y_BREADY;
input  [1:0] m_axi_Y_BRESP;
input  [0:0] m_axi_Y_BID;
input  [0:0] m_axi_Y_BUSER;
input   ap_ce;
input  [22:0] index;
input  [1:0] xDiff;
input  [1:0] yDiff;
input  [31:0] inter_pix1;
output  [7:0] ap_return;
output   Y_blk_n_AR;
output   Y_blk_n_R;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_Y_ARVALID;
reg m_axi_Y_RREADY;
reg Y_blk_n_AR;
reg Y_blk_n_R;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_flag00000000;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_sig_ioackin_m_axi_Y_ARREADY;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
reg    ap_block_state10_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_flag00011001;
reg   [31:0] inter_pix1_read_reg_142;
wire   [21:0] sum_fu_122_p2;
reg   [21:0] sum_reg_147;
reg   [31:0] Y_addr_reg_152;
reg    ap_block_pp0_stage0_flag00011011;
wire   [31:0] sum1_fu_131_p2;
reg    ap_reg_ioackin_m_axi_Y_ARREADY;
reg    ap_block_pp0_stage0_flag00001001;
wire   [8:0] p_shl2_fu_86_p3;
wire   [12:0] p_shl_fu_78_p3;
wire  signed [12:0] p_shl2_cast_fu_94_p1;
wire   [12:0] tmp_fu_98_p2;
wire  signed [12:0] xDiff_cast_fu_104_p1;
wire   [12:0] tmp1_fu_108_p2;
wire  signed [21:0] tmp1_cast_fu_114_p1;
wire   [21:0] tmp_24_fu_118_p1;
wire  signed [31:0] sum_cast_fu_128_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to8;
reg    ap_reset_idle_pp0;
reg    ap_reset_start_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_reg_ioackin_m_axi_Y_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_Y_ARREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_ce == 1'b1))) begin
            if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_m_axi_Y_ARREADY <= 1'b0;
            end else if (((1'b1 == m_axi_Y_ARREADY) & (ap_block_pp0_stage0_flag00001001 == 1'b0))) begin
                ap_reg_ioackin_m_axi_Y_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_ce == 1'b1))) begin
        Y_addr_reg_152 <= sum1_fu_131_p2;
        inter_pix1_read_reg_142 <= inter_pix1;
        sum_reg_147 <= sum_fu_122_p2;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        Y_blk_n_AR = m_axi_Y_ARREADY;
    end else begin
        Y_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter9))) begin
        Y_blk_n_R = m_axi_Y_RVALID;
    end else begin
        Y_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_start) & (ap_block_pp0_stage0_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_ce == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_idle_pp0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter8) & (1'b0 == ap_enable_reg_pp0_iter9))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter8))) begin
        ap_idle_pp0_0to8 = 1'b1;
    end else begin
        ap_idle_pp0_0to8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_start) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_ce == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_idle_pp0_0to8))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_idle_pp0_0to8) & (1'b1 == ap_start))) begin
        ap_reset_start_pp0 = 1'b1;
    end else begin
        ap_reset_start_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_Y_ARREADY)) begin
        ap_sig_ioackin_m_axi_Y_ARREADY = m_axi_Y_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_Y_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_ce == 1'b1) & (ap_block_pp0_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_m_axi_Y_ARREADY))) begin
        m_axi_Y_ARVALID = 1'b1;
    end else begin
        m_axi_Y_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter9) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_ce == 1'b1))) begin
        m_axi_Y_RREADY = 1'b1;
    end else begin
        m_axi_Y_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = (((1'b0 == ap_start) & (1'b1 == ap_start)) | ((1'b0 == m_axi_Y_RVALID) & (1'b1 == ap_enable_reg_pp0_iter9)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b0 == ap_start) & (1'b1 == ap_start)) | ((1'b0 == ap_sig_ioackin_m_axi_Y_ARREADY) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((1'b0 == m_axi_Y_RVALID) & (1'b1 == ap_enable_reg_pp0_iter9)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b0 == ap_start) & (1'b1 == ap_start)) | ((1'b0 == ap_sig_ioackin_m_axi_Y_ARREADY) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((1'b0 == m_axi_Y_RVALID) & (1'b1 == ap_enable_reg_pp0_iter9)) | (ap_ce == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter9 = (1'b0 == m_axi_Y_RVALID);
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (1'b0 == ap_start);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = m_axi_Y_RDATA;

assign m_axi_Y_ARADDR = Y_addr_reg_152;

assign m_axi_Y_ARBURST = 2'd0;

assign m_axi_Y_ARCACHE = 4'd0;

assign m_axi_Y_ARID = 1'd0;

assign m_axi_Y_ARLEN = 32'd1;

assign m_axi_Y_ARLOCK = 2'd0;

assign m_axi_Y_ARPROT = 3'd0;

assign m_axi_Y_ARQOS = 4'd0;

assign m_axi_Y_ARREGION = 4'd0;

assign m_axi_Y_ARSIZE = 3'd0;

assign m_axi_Y_ARUSER = 1'd0;

assign m_axi_Y_AWADDR = 32'd0;

assign m_axi_Y_AWBURST = 2'd0;

assign m_axi_Y_AWCACHE = 4'd0;

assign m_axi_Y_AWID = 1'd0;

assign m_axi_Y_AWLEN = 32'd0;

assign m_axi_Y_AWLOCK = 2'd0;

assign m_axi_Y_AWPROT = 3'd0;

assign m_axi_Y_AWQOS = 4'd0;

assign m_axi_Y_AWREGION = 4'd0;

assign m_axi_Y_AWSIZE = 3'd0;

assign m_axi_Y_AWUSER = 1'd0;

assign m_axi_Y_AWVALID = 1'b0;

assign m_axi_Y_BREADY = 1'b0;

assign m_axi_Y_WDATA = 8'd0;

assign m_axi_Y_WID = 1'd0;

assign m_axi_Y_WLAST = 1'b0;

assign m_axi_Y_WSTRB = 1'd0;

assign m_axi_Y_WUSER = 1'd0;

assign m_axi_Y_WVALID = 1'b0;

assign p_shl2_cast_fu_94_p1 = $signed(p_shl2_fu_86_p3);

assign p_shl2_fu_86_p3 = {{yDiff}, {7'd0}};

assign p_shl_fu_78_p3 = {{yDiff}, {11'd0}};

assign sum1_fu_131_p2 = ($signed(inter_pix1_read_reg_142) + $signed(sum_cast_fu_128_p1));

assign sum_cast_fu_128_p1 = $signed(sum_reg_147);

assign sum_fu_122_p2 = ($signed(tmp1_cast_fu_114_p1) + $signed(tmp_24_fu_118_p1));

assign tmp1_cast_fu_114_p1 = $signed(tmp1_fu_108_p2);

assign tmp1_fu_108_p2 = ($signed(tmp_fu_98_p2) + $signed(xDiff_cast_fu_104_p1));

assign tmp_24_fu_118_p1 = index[21:0];

assign tmp_fu_98_p2 = ($signed(p_shl_fu_78_p3) - $signed(p_shl2_cast_fu_94_p1));

assign xDiff_cast_fu_104_p1 = $signed(xDiff);

endmodule //getVal
